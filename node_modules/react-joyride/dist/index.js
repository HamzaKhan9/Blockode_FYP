"use strict";
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = function(obj, key, value) {
    return key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value
    }) : obj[key] = value;
};
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
var __publicField = function(obj, key, value) {
    __defNormalProp(obj, (typeof key === "undefined" ? "undefined" : _type_of(key)) !== "symbol" ? key + "" : key, value);
    return value;
};
// src/index.tsx
var src_exports = {};
__export(src_exports, {
    ACTIONS: function() {
        return ACTIONS;
    },
    EVENTS: function() {
        return EVENTS;
    },
    LIFECYCLE: function() {
        return LIFECYCLE;
    },
    STATUS: function() {
        return STATUS;
    },
    default: function() {
        return components_default;
    }
});
module.exports = __toCommonJS(src_exports);
// src/literals/index.ts
var ACTIONS = {
    INIT: "init",
    START: "start",
    STOP: "stop",
    RESET: "reset",
    PREV: "prev",
    NEXT: "next",
    GO: "go",
    CLOSE: "close",
    SKIP: "skip",
    UPDATE: "update"
};
var EVENTS = {
    TOUR_START: "tour:start",
    STEP_BEFORE: "step:before",
    BEACON: "beacon",
    TOOLTIP: "tooltip",
    STEP_AFTER: "step:after",
    TOUR_END: "tour:end",
    TOUR_STATUS: "tour:status",
    TARGET_NOT_FOUND: "error:target_not_found",
    ERROR: "error"
};
var LIFECYCLE = {
    INIT: "init",
    READY: "ready",
    BEACON: "beacon",
    TOOLTIP: "tooltip",
    COMPLETE: "complete",
    ERROR: "error"
};
var STATUS = {
    IDLE: "idle",
    READY: "ready",
    WAITING: "waiting",
    RUNNING: "running",
    PAUSED: "paused",
    SKIPPED: "skipped",
    FINISHED: "finished",
    ERROR: "error"
};
// src/components/index.tsx
var React6 = __toESM(require("react"));
var import_deep_equal = __toESM(require("@gilbarbara/deep-equal"));
var import_is_lite6 = __toESM(require("is-lite"));
var import_tree_changes3 = __toESM(require("tree-changes"));
// src/modules/dom.ts
var import_scroll = __toESM(require("scroll"));
var import_scrollparent = __toESM(require("scrollparent"));
function canUseDOM() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function getClientRect(element) {
    if (!element) {
        return null;
    }
    return element.getBoundingClientRect();
}
function getDocumentHeight() {
    var body = document.body, documentElement = document.documentElement;
    if (!body || !documentElement) {
        return 0;
    }
    return Math.max(body.scrollHeight, body.offsetHeight, documentElement.clientHeight, documentElement.scrollHeight, documentElement.offsetHeight);
}
function getElement(element) {
    if (typeof element === "string") {
        return document.querySelector(element);
    }
    return element;
}
function getStyleComputedProperty(el) {
    if (!el || el.nodeType !== 1) {
        return null;
    }
    return getComputedStyle(el);
}
function getScrollParent(element, skipFix, forListener) {
    if (!element) {
        return scrollDocument();
    }
    var parent = (0, import_scrollparent.default)(element);
    if (parent) {
        if (parent.isSameNode(scrollDocument())) {
            if (forListener) {
                return document;
            }
            return scrollDocument();
        }
        var hasScrolling = parent.scrollHeight > parent.offsetHeight;
        if (!hasScrolling && !skipFix) {
            parent.style.overflow = "initial";
            return scrollDocument();
        }
    }
    return parent;
}
function hasCustomScrollParent(element, skipFix) {
    if (!element) {
        return false;
    }
    var parent = getScrollParent(element, skipFix);
    return !parent.isSameNode(scrollDocument());
}
function hasCustomOffsetParent(element) {
    return element.offsetParent !== document.body;
}
function hasPosition(el) {
    var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "fixed";
    if (!el || !_instanceof(el, HTMLElement)) {
        return false;
    }
    var nodeName = el.nodeName;
    var styles = getStyleComputedProperty(el);
    if (nodeName === "BODY" || nodeName === "HTML") {
        return false;
    }
    if (styles && styles.position === type) {
        return true;
    }
    if (!el.parentNode) {
        return false;
    }
    return hasPosition(el.parentNode, type);
}
function isElementVisible(element) {
    if (!element) {
        return false;
    }
    var parentElement = element;
    while(parentElement){
        if (parentElement === document.body) {
            break;
        }
        if (_instanceof(parentElement, HTMLElement)) {
            var _getComputedStyle = getComputedStyle(parentElement), display = _getComputedStyle.display, visibility = _getComputedStyle.visibility;
            if (display === "none" || visibility === "hidden") {
                return false;
            }
        }
        var _parentElement_parentElement;
        parentElement = (_parentElement_parentElement = parentElement.parentElement) !== null && _parentElement_parentElement !== void 0 ? _parentElement_parentElement : null;
    }
    return true;
}
function getElementPosition(element, offset, skipFix) {
    var elementRect = getClientRect(element);
    var parent = getScrollParent(element, skipFix);
    var hasScrollParent = hasCustomScrollParent(element, skipFix);
    var parentTop = 0;
    if (_instanceof(parent, HTMLElement)) {
        parentTop = parent.scrollTop;
    }
    var _elementRect_top;
    var top = ((_elementRect_top = elementRect === null || elementRect === void 0 ? void 0 : elementRect.top) !== null && _elementRect_top !== void 0 ? _elementRect_top : 0) + (!hasScrollParent && !hasPosition(element) ? parentTop : 0);
    return Math.floor(top - offset);
}
function getScrollTo(element, offset, skipFix) {
    if (!element) {
        return 0;
    }
    var parent = (0, import_scrollparent.default)(element);
    var top = element.offsetTop;
    if (parent && hasCustomScrollParent(element, skipFix) && !hasCustomOffsetParent(element)) {
        top -= parent.offsetTop;
    }
    return Math.floor(top - offset);
}
function scrollDocument() {
    var _document_scrollingElement;
    return (_document_scrollingElement = document.scrollingElement) !== null && _document_scrollingElement !== void 0 ? _document_scrollingElement : document.documentElement;
}
function scrollTo(value, options) {
    var duration = options.duration, element = options.element;
    return new Promise(function(resolve, reject) {
        var scrollTop = element.scrollTop;
        var limit = value > scrollTop ? value - scrollTop : scrollTop - value;
        import_scroll.default.top(element, value, {
            duration: limit < 100 ? 50 : duration
        }, function(error) {
            if (error && error.message !== "Element already at target scroll position") {
                return reject(error);
            }
            return resolve();
        });
    });
}
// src/modules/helpers.ts
var import_react = require("react");
var import_react_dom = require("react-dom");
var import_is_lite = __toESM(require("is-lite"));
var isReact16 = import_react_dom.createPortal !== void 0;
function getBrowser() {
    var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : navigator.userAgent;
    var browser = userAgent;
    if (typeof window === "undefined") {
        browser = "node";
    } else if (document.documentMode) {
        browser = "ie";
    } else if (/Edge/.test(userAgent)) {
        browser = "edge";
    } else if (Boolean(window.opera) || userAgent.includes(" OPR/")) {
        browser = "opera";
    } else if (typeof window.InstallTrigger !== "undefined") {
        browser = "firefox";
    } else if (window.chrome) {
        browser = "chrome";
    } else if (/(Version\/([\d._]+).*Safari|CriOS|FxiOS| Mobile\/)/.test(userAgent)) {
        browser = "safari";
    }
    return browser;
}
function getText(root) {
    var content = [];
    var recurse = function(child) {
        if (typeof child === "string" || typeof child === "number") {
            content.push(child);
        } else if (Array.isArray(child)) {
            child.forEach(function(c) {
                return recurse(c);
            });
        } else if ((0, import_react.isValidElement)(child)) {
            var children = child.props.children;
            if (Array.isArray(children)) {
                children.forEach(function(c) {
                    return recurse(c);
                });
            } else {
                recurse(children);
            }
        }
    };
    recurse(root);
    return content.join(" ").trim();
}
function hasValidKeys(object, keys) {
    if (!import_is_lite.default.plainObject(object) || !import_is_lite.default.array(keys)) {
        return false;
    }
    return Object.keys(object).every(function(d) {
        return keys.includes(d);
    });
}
function hexToRGB(hex) {
    var shorthandRegex = /^#?([\da-f])([\da-f])([\da-f])$/i;
    var properHex = hex.replace(shorthandRegex, function(_m, r, g, b) {
        return r + r + g + g + b + b;
    });
    var result = /^#?([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i.exec(properHex);
    return result ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16)
    ] : [];
}
function hideBeacon(step) {
    return step.disableBeacon || step.placement === "center";
}
function isLegacy() {
    return ![
        "chrome",
        "safari",
        "firefox",
        "opera"
    ].includes(getBrowser());
}
function log(param) {
    var data = param.data, _param_debug = param.debug, debug = _param_debug === void 0 ? false : _param_debug, title = param.title, _param_warn = param.warn, warn = _param_warn === void 0 ? false : _param_warn;
    var logFn = warn ? console.warn || console.error : console.log;
    if (debug) {
        if (title && data) {
            console.groupCollapsed("%creact-joyride: ".concat(title), "color: #ff0044; font-weight: bold; font-size: 12px;");
            if (Array.isArray(data)) {
                data.forEach(function(d) {
                    if (import_is_lite.default.plainObject(d) && d.key) {
                        logFn.apply(console, [
                            d.key,
                            d.value
                        ]);
                    } else {
                        logFn.apply(console, [
                            d
                        ]);
                    }
                });
            } else {
                logFn.apply(console, [
                    data
                ]);
            }
            console.groupEnd();
        } else {
            console.error("Missing title or data props");
        }
    }
}
function shouldScroll(options) {
    var isFirstStep = options.isFirstStep, lifecycle = options.lifecycle, previousLifecycle = options.previousLifecycle, scrollToFirstStep = options.scrollToFirstStep, step = options.step, target = options.target;
    return !step.disableScrolling && (!isFirstStep || scrollToFirstStep || lifecycle === LIFECYCLE.TOOLTIP) && step.placement !== "center" && (!step.isFixed || !hasPosition(target)) && // fixed steps don't need to scroll
    previousLifecycle !== lifecycle && [
        LIFECYCLE.BEACON,
        LIFECYCLE.TOOLTIP
    ].includes(lifecycle);
}
// src/modules/step.ts
var import_helpers3 = require("@gilbarbara/helpers");
var import_deepmerge2 = __toESM(require("deepmerge"));
var import_is_lite2 = __toESM(require("is-lite"));
// src/defaults.ts
var import_helpers = require("@gilbarbara/helpers");
var defaultFloaterProps = {
    options: {
        preventOverflow: {
            boundariesElement: "scrollParent"
        }
    },
    wrapperOptions: {
        offset: -18,
        position: true
    }
};
var defaultLocale = {
    back: "Back",
    close: "Close",
    last: "Last",
    next: "Next",
    open: "Open the dialog",
    skip: "Skip"
};
var defaultStep = {
    event: "click",
    placement: "bottom",
    offset: 10,
    disableBeacon: false,
    disableCloseOnEsc: false,
    disableOverlay: false,
    disableOverlayClose: false,
    disableScrollParentFix: false,
    disableScrolling: false,
    hideBackButton: false,
    hideCloseButton: false,
    hideFooter: false,
    isFixed: false,
    locale: defaultLocale,
    showProgress: false,
    showSkipButton: false,
    spotlightClicks: false,
    spotlightPadding: 10
};
var defaultProps = {
    continuous: false,
    debug: false,
    disableCloseOnEsc: false,
    disableOverlay: false,
    disableOverlayClose: false,
    disableScrolling: false,
    disableScrollParentFix: false,
    getHelpers: (0, import_helpers.noop)(),
    hideBackButton: false,
    run: true,
    scrollOffset: 20,
    scrollDuration: 300,
    scrollToFirstStep: false,
    showSkipButton: false,
    showProgress: false,
    spotlightClicks: false,
    spotlightPadding: 10,
    steps: []
};
// src/styles.ts
var import_deepmerge = __toESM(require("deepmerge"));
var defaultOptions = {
    arrowColor: "#fff",
    backgroundColor: "#fff",
    beaconSize: 36,
    overlayColor: "rgba(0, 0, 0, 0.5)",
    primaryColor: "#f04",
    spotlightShadow: "0 0 15px rgba(0, 0, 0, 0.5)",
    textColor: "#333",
    width: 380,
    zIndex: 100
};
var buttonBase = {
    backgroundColor: "transparent",
    border: 0,
    borderRadius: 0,
    color: "#555",
    cursor: "pointer",
    fontSize: 16,
    lineHeight: 1,
    padding: 8,
    WebkitAppearance: "none"
};
var spotlight = {
    borderRadius: 4,
    position: "absolute"
};
function getStyles(propsStyles, stepStyles) {
    var mergedStyles = (0, import_deepmerge.default)(propsStyles !== null && propsStyles !== void 0 ? propsStyles : {}, stepStyles !== null && stepStyles !== void 0 ? stepStyles : {});
    var options = (0, import_deepmerge.default)(defaultOptions, mergedStyles.options || {});
    var width = options.width;
    if (window.innerWidth > 480) {
        width = 380;
    }
    if ("width" in options) {
        width = typeof options.width === "number" && window.innerWidth < options.width ? window.innerWidth - 30 : options.width;
    }
    var overlay = {
        bottom: 0,
        left: 0,
        overflow: "hidden",
        position: "absolute",
        right: 0,
        top: 0,
        zIndex: options.zIndex
    };
    var defaultStyles = {
        beacon: _object_spread_props(_object_spread({}, buttonBase), {
            display: "inline-block",
            height: options.beaconSize,
            position: "relative",
            width: options.beaconSize,
            zIndex: options.zIndex
        }),
        beaconInner: {
            animation: "joyride-beacon-inner 1.2s infinite ease-in-out",
            backgroundColor: options.primaryColor,
            borderRadius: "50%",
            display: "block",
            height: "50%",
            left: "50%",
            opacity: 0.7,
            position: "absolute",
            top: "50%",
            transform: "translate(-50%, -50%)",
            width: "50%"
        },
        beaconOuter: {
            animation: "joyride-beacon-outer 1.2s infinite ease-in-out",
            backgroundColor: "rgba(".concat(hexToRGB(options.primaryColor).join(","), ", 0.2)"),
            border: "2px solid ".concat(options.primaryColor),
            borderRadius: "50%",
            boxSizing: "border-box",
            display: "block",
            height: "100%",
            left: 0,
            opacity: 0.9,
            position: "absolute",
            top: 0,
            transformOrigin: "center",
            width: "100%"
        },
        tooltip: {
            backgroundColor: options.backgroundColor,
            borderRadius: 5,
            boxSizing: "border-box",
            color: options.textColor,
            fontSize: 16,
            maxWidth: "100%",
            padding: 15,
            position: "relative",
            width: width
        },
        tooltipContainer: {
            lineHeight: 1.4,
            textAlign: "center"
        },
        tooltipTitle: {
            fontSize: 18,
            margin: 0
        },
        tooltipContent: {
            padding: "20px 10px"
        },
        tooltipFooter: {
            alignItems: "center",
            display: "flex",
            justifyContent: "flex-end",
            marginTop: 15
        },
        tooltipFooterSpacer: {
            flex: 1
        },
        buttonNext: _object_spread_props(_object_spread({}, buttonBase), {
            backgroundColor: options.primaryColor,
            borderRadius: 4,
            color: "#fff"
        }),
        buttonBack: _object_spread_props(_object_spread({}, buttonBase), {
            color: options.primaryColor,
            marginLeft: "auto",
            marginRight: 5
        }),
        buttonClose: _object_spread_props(_object_spread({}, buttonBase), {
            color: options.textColor,
            height: 14,
            padding: 15,
            position: "absolute",
            right: 0,
            top: 0,
            width: 14
        }),
        buttonSkip: _object_spread_props(_object_spread({}, buttonBase), {
            color: options.textColor,
            fontSize: 14
        }),
        overlay: _object_spread_props(_object_spread({}, overlay), {
            backgroundColor: options.overlayColor,
            mixBlendMode: "hard-light"
        }),
        overlayLegacy: _object_spread({}, overlay),
        overlayLegacyCenter: _object_spread_props(_object_spread({}, overlay), {
            backgroundColor: options.overlayColor
        }),
        spotlight: _object_spread_props(_object_spread({}, spotlight), {
            backgroundColor: "gray"
        }),
        spotlightLegacy: _object_spread_props(_object_spread({}, spotlight), {
            boxShadow: "0 0 0 9999px ".concat(options.overlayColor, ", ").concat(options.spotlightShadow)
        }),
        floaterStyles: {
            arrow: {
                color: options.arrowColor
            },
            options: {
                zIndex: options.zIndex + 100
            }
        },
        options: options
    };
    return (0, import_deepmerge.default)(defaultStyles, mergedStyles);
}
// src/modules/step.ts
function getTourProps(props) {
    return (0, import_helpers3.pick)(props, "beaconComponent", "disableCloseOnEsc", "disableOverlay", "disableOverlayClose", "disableScrolling", "disableScrollParentFix", "floaterProps", "hideBackButton", "hideCloseButton", "locale", "showProgress", "showSkipButton", "spotlightClicks", "spotlightPadding", "styles", "tooltipComponent");
}
function getMergedStep(currentStep, props) {
    var step = currentStep !== null && currentStep !== void 0 ? currentStep : {};
    var mergedStep = import_deepmerge2.default.all([
        defaultStep,
        getTourProps(props),
        step
    ], {
        isMergeableObject: import_is_lite2.default.plainObject
    });
    var mergedStyles = getStyles(props.styles, mergedStep.styles);
    var scrollParent2 = hasCustomScrollParent(getElement(mergedStep.target), mergedStep.disableScrollParentFix);
    var _props_floaterProps, _mergedStep_floaterProps;
    var floaterProps = import_deepmerge2.default.all([
        defaultFloaterProps,
        (_props_floaterProps = props.floaterProps) !== null && _props_floaterProps !== void 0 ? _props_floaterProps : {},
        (_mergedStep_floaterProps = mergedStep.floaterProps) !== null && _mergedStep_floaterProps !== void 0 ? _mergedStep_floaterProps : {}
    ]);
    floaterProps.offset = mergedStep.offset;
    var _floaterProps_styles;
    floaterProps.styles = (0, import_deepmerge2.default)((_floaterProps_styles = floaterProps.styles) !== null && _floaterProps_styles !== void 0 ? _floaterProps_styles : {}, mergedStyles.floaterStyles);
    var _props_spotlightPadding, _ref;
    floaterProps.offset += (_ref = (_props_spotlightPadding = props.spotlightPadding) !== null && _props_spotlightPadding !== void 0 ? _props_spotlightPadding : mergedStep.spotlightPadding) !== null && _ref !== void 0 ? _ref : 0;
    if (mergedStep.placementBeacon && floaterProps.wrapperOptions) {
        floaterProps.wrapperOptions.placement = mergedStep.placementBeacon;
    }
    if (scrollParent2 && floaterProps.options.preventOverflow) {
        floaterProps.options.preventOverflow.boundariesElement = "window";
    }
    var _props_locale;
    return _object_spread_props(_object_spread({}, mergedStep), {
        locale: import_deepmerge2.default.all([
            defaultLocale,
            (_props_locale = props.locale) !== null && _props_locale !== void 0 ? _props_locale : {},
            mergedStep.locale || {}
        ]),
        floaterProps: floaterProps,
        styles: (0, import_helpers3.omit)(mergedStyles, "floaterStyles")
    });
}
function validateStep(step) {
    var debug = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!import_is_lite2.default.plainObject(step)) {
        log({
            title: "validateStep",
            data: "step must be an object",
            warn: true,
            debug: debug
        });
        return false;
    }
    if (!step.target) {
        log({
            title: "validateStep",
            data: "target is missing from the step",
            warn: true,
            debug: debug
        });
        return false;
    }
    return true;
}
function validateSteps(steps) {
    var debug = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (!import_is_lite2.default.array(steps)) {
        log({
            title: "validateSteps",
            data: "steps must be an array",
            warn: true,
            debug: debug
        });
        return false;
    }
    return steps.every(function(d) {
        return validateStep(d, debug);
    });
}
// src/modules/store.ts
var import_is_lite3 = __toESM(require("is-lite"));
var defaultState = {
    action: "init",
    controlled: false,
    index: 0,
    lifecycle: LIFECYCLE.INIT,
    size: 0,
    status: STATUS.IDLE
};
var validKeys = [
    "action",
    "index",
    "lifecycle",
    "status"
];
var Store = /*#__PURE__*/ function() {
    function Store(options) {
        var _this = this;
        _class_call_check(this, Store);
        __publicField(this, "data", /* @__PURE__ */ new Map());
        __publicField(this, "listener");
        __publicField(this, "store", /* @__PURE__ */ new Map());
        __publicField(this, "addListener", function(listener) {
            _this.listener = listener;
        });
        __publicField(this, "setSteps", function(steps) {
            var _this_getState = _this.getState(), size = _this_getState.size, status = _this_getState.status;
            var state = {
                size: steps.length,
                status: status
            };
            _this.data.set("steps", steps);
            if (status === STATUS.WAITING && !size && steps.length) {
                state.status = STATUS.RUNNING;
            }
            _this.setState(state);
        });
        __publicField(this, "close", function() {
            var _this_getState = _this.getState(), index = _this_getState.index, status = _this_getState.status;
            if (status !== STATUS.RUNNING) {
                return;
            }
            _this.setState(_object_spread({}, _this.getNextState({
                action: ACTIONS.CLOSE,
                index: index + 1
            })));
        });
        __publicField(this, "go", function(nextIndex) {
            var _this_getState = _this.getState(), controlled = _this_getState.controlled, status = _this_getState.status;
            if (controlled || status !== STATUS.RUNNING) {
                return;
            }
            var step = _this.getSteps()[nextIndex];
            _this.setState(_object_spread_props(_object_spread({}, _this.getNextState({
                action: ACTIONS.GO,
                index: nextIndex
            })), {
                status: step ? status : STATUS.FINISHED
            }));
        });
        __publicField(this, "info", function() {
            return _this.getState();
        });
        __publicField(this, "next", function() {
            var _this_getState = _this.getState(), index = _this_getState.index, status = _this_getState.status;
            if (status !== STATUS.RUNNING) {
                return;
            }
            _this.setState(_this.getNextState({
                action: ACTIONS.NEXT,
                index: index + 1
            }));
        });
        __publicField(this, "open", function() {
            var status = _this.getState().status;
            if (status !== STATUS.RUNNING) {
                return;
            }
            _this.setState(_object_spread({}, _this.getNextState({
                action: ACTIONS.UPDATE,
                lifecycle: LIFECYCLE.TOOLTIP
            })));
        });
        __publicField(this, "prev", function() {
            var _this_getState = _this.getState(), index = _this_getState.index, status = _this_getState.status;
            if (status !== STATUS.RUNNING) {
                return;
            }
            _this.setState(_object_spread({}, _this.getNextState({
                action: ACTIONS.PREV,
                index: index - 1
            })));
        });
        __publicField(this, "reset", function() {
            var restart = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var controlled = _this.getState().controlled;
            if (controlled) {
                return;
            }
            _this.setState(_object_spread_props(_object_spread({}, _this.getNextState({
                action: ACTIONS.RESET,
                index: 0
            })), {
                status: restart ? STATUS.RUNNING : STATUS.READY
            }));
        });
        __publicField(this, "skip", function() {
            var status = _this.getState().status;
            if (status !== STATUS.RUNNING) {
                return;
            }
            _this.setState({
                action: ACTIONS.SKIP,
                lifecycle: LIFECYCLE.INIT,
                status: STATUS.SKIPPED
            });
        });
        __publicField(this, "start", function(nextIndex) {
            var _this_getState = _this.getState(), index = _this_getState.index, size = _this_getState.size;
            _this.setState(_object_spread_props(_object_spread({}, _this.getNextState({
                action: ACTIONS.START,
                index: import_is_lite3.default.number(nextIndex) ? nextIndex : index
            }, true)), {
                status: size ? STATUS.RUNNING : STATUS.WAITING
            }));
        });
        __publicField(this, "stop", function() {
            var advance = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var _this_getState = _this.getState(), index = _this_getState.index, status = _this_getState.status;
            if ([
                STATUS.FINISHED,
                STATUS.SKIPPED
            ].includes(status)) {
                return;
            }
            _this.setState(_object_spread_props(_object_spread({}, _this.getNextState({
                action: ACTIONS.STOP,
                index: index + (advance ? 1 : 0)
            })), {
                status: STATUS.PAUSED
            }));
        });
        __publicField(this, "update", function(state) {
            if (!hasValidKeys(state, validKeys)) {
                throw new Error("State is not valid. Valid keys: ".concat(validKeys.join(", ")));
            }
            var _state_action;
            _this.setState(_object_spread({}, _this.getNextState(_object_spread_props(_object_spread({}, _this.getState(), state), {
                action: (_state_action = state.action) !== null && _state_action !== void 0 ? _state_action : ACTIONS.UPDATE
            }), true)));
        });
        var _ref = options !== null && options !== void 0 ? options : {}, _ref_continuous = _ref.continuous, continuous = _ref_continuous === void 0 ? false : _ref_continuous, stepIndex = _ref.stepIndex, _ref_steps = _ref.steps, steps = _ref_steps === void 0 ? [] : _ref_steps;
        this.setState({
            action: ACTIONS.INIT,
            controlled: import_is_lite3.default.number(stepIndex),
            continuous: continuous,
            index: import_is_lite3.default.number(stepIndex) ? stepIndex : 0,
            lifecycle: LIFECYCLE.INIT,
            status: steps.length ? STATUS.READY : STATUS.IDLE
        }, true);
        this.listener = null;
        this.setSteps(steps);
    }
    _create_class(Store, [
        {
            key: "getState",
            value: function getState() {
                if (!this.store.size) {
                    return _object_spread({}, defaultState);
                }
                return {
                    action: this.store.get("action") || "",
                    controlled: this.store.get("controlled") || false,
                    index: parseInt(this.store.get("index"), 10),
                    lifecycle: this.store.get("lifecycle") || "",
                    size: this.store.get("size") || 0,
                    status: this.store.get("status") || ""
                };
            }
        },
        {
            key: "getNextState",
            value: function getNextState(state) {
                var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                var _this_getState = this.getState(), action = _this_getState.action, controlled = _this_getState.controlled, index = _this_getState.index, size = _this_getState.size, status = _this_getState.status;
                var newIndex = import_is_lite3.default.number(state.index) ? state.index : index;
                var nextIndex = controlled && !force ? index : Math.min(Math.max(newIndex, 0), size);
                var _state_action, _state_lifecycle, _state_size, _state_status;
                return {
                    action: (_state_action = state.action) !== null && _state_action !== void 0 ? _state_action : action,
                    controlled: controlled,
                    index: nextIndex,
                    lifecycle: (_state_lifecycle = state.lifecycle) !== null && _state_lifecycle !== void 0 ? _state_lifecycle : LIFECYCLE.INIT,
                    size: (_state_size = state.size) !== null && _state_size !== void 0 ? _state_size : size,
                    status: nextIndex === size ? STATUS.FINISHED : (_state_status = state.status) !== null && _state_status !== void 0 ? _state_status : status
                };
            }
        },
        {
            key: "getSteps",
            value: function getSteps() {
                var steps = this.data.get("steps");
                return Array.isArray(steps) ? steps : [];
            }
        },
        {
            key: "hasUpdatedState",
            value: function hasUpdatedState(oldState) {
                var before = JSON.stringify(oldState);
                var after = JSON.stringify(this.getState());
                return before !== after;
            }
        },
        {
            key: "setState",
            value: function setState(nextState) {
                var initial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                var state = this.getState();
                var _$_object_spread = _object_spread({}, state, nextState), action = _$_object_spread.action, index = _$_object_spread.index, lifecycle = _$_object_spread.lifecycle, size = _$_object_spread.size, status = _$_object_spread.status;
                this.store.set("action", action);
                this.store.set("index", index);
                this.store.set("lifecycle", lifecycle);
                this.store.set("size", size);
                this.store.set("status", status);
                if (initial) {
                    this.store.set("controlled", nextState.controlled);
                    this.store.set("continuous", nextState.continuous);
                }
                if (this.listener && this.hasUpdatedState(state)) {
                    this.listener(this.getState());
                }
            }
        },
        {
            key: "getHelpers",
            value: function getHelpers() {
                return {
                    close: this.close,
                    go: this.go,
                    info: this.info,
                    next: this.next,
                    open: this.open,
                    prev: this.prev,
                    reset: this.reset,
                    skip: this.skip
                };
            }
        }
    ]);
    return Store;
}();
function createStore(options) {
    return new Store(options);
}
// src/components/Step.tsx
var React5 = __toESM(require("react"));
var import_react_floater = __toESM(require("react-floater"));
var import_is_lite5 = __toESM(require("is-lite"));
var import_tree_changes2 = __toESM(require("tree-changes"));
// src/modules/scope.ts
var Scope = function Scope(element, options) {
    var _this = this;
    _class_call_check(this, Scope);
    __publicField(this, "element");
    __publicField(this, "options");
    __publicField(this, "canBeTabbed", function(element) {
        var tabIndex = element.tabIndex;
        if (tabIndex === null || tabIndex < 0) {
            return false;
        }
        return _this.canHaveFocus(element);
    });
    __publicField(this, "canHaveFocus", function(element) {
        var validTabNodes = /input|select|textarea|button|object/;
        var nodeName = element.nodeName.toLowerCase();
        var isValid = validTabNodes.test(nodeName) && !element.getAttribute("disabled") || nodeName === "a" && !!element.getAttribute("href");
        return isValid && _this.isVisible(element);
    });
    __publicField(this, "findValidTabElements", function() {
        return [].slice.call(_this.element.querySelectorAll("*"), 0).filter(_this.canBeTabbed);
    });
    __publicField(this, "handleKeyDown", function(event) {
        var _this_options = _this.options, _this_options_code = _this_options.code, code = _this_options_code === void 0 ? "Tab" : _this_options_code;
        if (event.code === code) {
            _this.interceptTab(event);
        }
    });
    __publicField(this, "interceptTab", function(event) {
        event.preventDefault();
        var elements = _this.findValidTabElements();
        var shiftKey = event.shiftKey;
        if (!elements.length) {
            return;
        }
        var x = document.activeElement ? elements.indexOf(document.activeElement) : 0;
        if (x === -1 || !shiftKey && x + 1 === elements.length) {
            x = 0;
        } else if (shiftKey && x === 0) {
            x = elements.length - 1;
        } else {
            x += shiftKey ? -1 : 1;
        }
        elements[x].focus();
    });
    // eslint-disable-next-line class-methods-use-this
    __publicField(this, "isHidden", function(element) {
        var noSize = element.offsetWidth <= 0 && element.offsetHeight <= 0;
        var style = window.getComputedStyle(element);
        if (noSize && !element.innerHTML) {
            return true;
        }
        return noSize && style.getPropertyValue("overflow") !== "visible" || style.getPropertyValue("display") === "none";
    });
    __publicField(this, "isVisible", function(element) {
        var parentElement = element;
        while(parentElement){
            if (_instanceof(parentElement, HTMLElement)) {
                if (parentElement === document.body) {
                    break;
                }
                if (_this.isHidden(parentElement)) {
                    return false;
                }
                parentElement = parentElement.parentNode;
            }
        }
        return true;
    });
    __publicField(this, "removeScope", function() {
        window.removeEventListener("keydown", _this.handleKeyDown);
    });
    __publicField(this, "checkFocus", function(target) {
        if (document.activeElement !== target) {
            target.focus();
            window.requestAnimationFrame(function() {
                return _this.checkFocus(target);
            });
        }
    });
    __publicField(this, "setFocus", function() {
        var selector = _this.options.selector;
        if (!selector) {
            return;
        }
        var target = _this.element.querySelector(selector);
        if (target) {
            window.requestAnimationFrame(function() {
                return _this.checkFocus(target);
            });
        }
    });
    if (!_instanceof(element, HTMLElement)) {
        throw new TypeError("Invalid parameter: element must be an HTMLElement");
    }
    this.element = element;
    this.options = options;
    window.addEventListener("keydown", this.handleKeyDown, false);
    this.setFocus();
};
// src/components/Beacon.tsx
var React = __toESM(require("react"));
var import_react_innertext = __toESM(require("react-innertext"));
var import_is_lite4 = __toESM(require("is-lite"));
var import_jsx_runtime = require("react/jsx-runtime");
var JoyrideBeacon = /*#__PURE__*/ function(_React_Component) {
    _inherits(JoyrideBeacon, _React_Component);
    var _super = _create_super(JoyrideBeacon);
    function JoyrideBeacon(props) {
        _class_call_check(this, JoyrideBeacon);
        var _this;
        _this = _super.call(this, props);
        __publicField(_assert_this_initialized(_this), "beacon", null);
        __publicField(_assert_this_initialized(_this), "setBeaconRef", function(c) {
            _this.beacon = c;
        });
        if (!props.beaconComponent) {
            var head = document.head || document.getElementsByTagName("head")[0];
            var style = document.createElement("style");
            var css = "\n        @keyframes joyride-beacon-inner {\n          20% {\n            opacity: 0.9;\n          }\n        \n          90% {\n            opacity: 0.7;\n          }\n        }\n        \n        @keyframes joyride-beacon-outer {\n          0% {\n            transform: scale(1);\n          }\n        \n          45% {\n            opacity: 0.7;\n            transform: scale(0.75);\n          }\n        \n          100% {\n            opacity: 0.9;\n            transform: scale(1);\n          }\n        }\n      ";
            style.id = "joyride-beacon-animation";
            if (props.nonce) {
                style.setAttribute("nonce", props.nonce);
            }
            style.appendChild(document.createTextNode(css));
            head.appendChild(style);
        }
        return _this;
    }
    _create_class(JoyrideBeacon, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this = this;
                var shouldFocus = this.props.shouldFocus;
                if (process.env.NODE_ENV !== "production") {
                    if (!import_is_lite4.default.domElement(this.beacon)) {
                        console.warn("beacon is not a valid DOM element");
                    }
                }
                setTimeout(function() {
                    if (import_is_lite4.default.domElement(_this.beacon) && shouldFocus) {
                        _this.beacon.focus();
                    }
                }, 0);
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var style = document.getElementById("joyride-beacon-animation");
                if (style === null || style === void 0 ? void 0 : style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, beaconComponent = _this_props.beaconComponent, continuous = _this_props.continuous, index = _this_props.index, isLastStep = _this_props.isLastStep, locale = _this_props.locale, onClickOrHover = _this_props.onClickOrHover, size = _this_props.size, step = _this_props.step, styles = _this_props.styles;
                var title = import_is_lite4.default.string(locale.open) ? locale.open : (0, import_react_innertext.default)(locale.open);
                var sharedProps = {
                    "aria-label": title,
                    onClick: onClickOrHover,
                    onMouseEnter: onClickOrHover,
                    ref: this.setBeaconRef,
                    title: title
                };
                var component;
                if (beaconComponent) {
                    var BeaconComponent = beaconComponent;
                    component = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(BeaconComponent, _object_spread({
                        continuous: continuous,
                        index: index,
                        isLastStep: isLastStep,
                        size: size,
                        step: step
                    }, sharedProps));
                } else {
                    component = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", _object_spread_props(_object_spread({
                        className: "react-joyride__beacon",
                        "data-test-id": "button-beacon",
                        style: styles.beacon,
                        type: "button"
                    }, sharedProps), {
                        children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                                style: styles.beaconInner
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                                style: styles.beaconOuter
                            })
                        ]
                    }), "JoyrideBeacon");
                }
                return component;
            }
        }
    ]);
    return JoyrideBeacon;
}(React.Component);
// src/components/Overlay.tsx
var React2 = __toESM(require("react"));
var import_tree_changes = __toESM(require("tree-changes"));
// src/components/Spotlight.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function JoyrideSpotlight(param) {
    var styles = param.styles;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", {
        className: "react-joyride__spotlight",
        style: styles
    }, "JoyrideSpotlight");
}
var Spotlight_default = JoyrideSpotlight;
// src/components/Overlay.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var JoyrideOverlay = /*#__PURE__*/ function(_React2_Component) {
    _inherits(JoyrideOverlay, _React2_Component);
    var _super = _create_super(JoyrideOverlay);
    function JoyrideOverlay() {
        _class_call_check(this, JoyrideOverlay);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        __publicField(_assert_this_initialized(_this), "isActive", false);
        __publicField(_assert_this_initialized(_this), "resizeTimeout");
        __publicField(_assert_this_initialized(_this), "scrollTimeout");
        __publicField(_assert_this_initialized(_this), "scrollParent");
        __publicField(_assert_this_initialized(_this), "state", {
            isScrolling: false,
            mouseOverSpotlight: false,
            showSpotlight: true
        });
        __publicField(_assert_this_initialized(_this), "handleMouseMove", function(event) {
            var mouseOverSpotlight = _this.state.mouseOverSpotlight;
            var _this_spotlightStyles = _this.spotlightStyles, height = _this_spotlightStyles.height, left = _this_spotlightStyles.left, position = _this_spotlightStyles.position, top = _this_spotlightStyles.top, width = _this_spotlightStyles.width;
            var offsetY = position === "fixed" ? event.clientY : event.pageY;
            var offsetX = position === "fixed" ? event.clientX : event.pageX;
            var inSpotlightHeight = offsetY >= top && offsetY <= top + height;
            var inSpotlightWidth = offsetX >= left && offsetX <= left + width;
            var inSpotlight = inSpotlightWidth && inSpotlightHeight;
            if (inSpotlight !== mouseOverSpotlight) {
                _this.updateState({
                    mouseOverSpotlight: inSpotlight
                });
            }
        });
        __publicField(_assert_this_initialized(_this), "handleScroll", function() {
            var target = _this.props.target;
            var element = getElement(target);
            if (_this.scrollParent !== document) {
                var isScrolling = _this.state.isScrolling;
                if (!isScrolling) {
                    _this.updateState({
                        isScrolling: true,
                        showSpotlight: false
                    });
                }
                clearTimeout(_this.scrollTimeout);
                _this.scrollTimeout = window.setTimeout(function() {
                    _this.updateState({
                        isScrolling: false,
                        showSpotlight: true
                    });
                }, 50);
            } else if (hasPosition(element, "sticky")) {
                _this.updateState({});
            }
        });
        __publicField(_assert_this_initialized(_this), "handleResize", function() {
            clearTimeout(_this.resizeTimeout);
            _this.resizeTimeout = window.setTimeout(function() {
                if (!_this.isActive) {
                    return;
                }
                _this.forceUpdate();
            }, 100);
        });
        return _this;
    }
    _create_class(JoyrideOverlay, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this_props = this.props, debug = _this_props.debug, disableScrolling = _this_props.disableScrolling, _this_props_disableScrollParentFix = _this_props.disableScrollParentFix, disableScrollParentFix = _this_props_disableScrollParentFix === void 0 ? false : _this_props_disableScrollParentFix, target = _this_props.target;
                var element = getElement(target);
                this.scrollParent = getScrollParent(element !== null && element !== void 0 ? element : document.body, disableScrollParentFix, true);
                this.isActive = true;
                if (!disableScrolling) {
                    if (process.env.NODE_ENV === "development" && hasCustomScrollParent(element, true)) {
                        log({
                            title: "step has a custom scroll parent and can cause trouble with scrolling",
                            data: [
                                {
                                    key: "parent",
                                    value: this.scrollParent
                                }
                            ],
                            debug: debug
                        });
                    }
                }
                window.addEventListener("resize", this.handleResize);
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(previousProps) {
                var _this = this;
                var _this_props = this.props, lifecycle = _this_props.lifecycle, spotlightClicks = _this_props.spotlightClicks;
                var changed = (0, import_tree_changes.default)(previousProps, this.props).changed;
                if (changed("lifecycle", LIFECYCLE.TOOLTIP)) {
                    var _this_scrollParent;
                    (_this_scrollParent = this.scrollParent) === null || _this_scrollParent === void 0 ? void 0 : _this_scrollParent.addEventListener("scroll", this.handleScroll, {
                        passive: true
                    });
                    setTimeout(function() {
                        var isScrolling = _this.state.isScrolling;
                        if (!isScrolling) {
                            _this.updateState({
                                showSpotlight: true
                            });
                        }
                    }, 100);
                }
                if (changed("spotlightClicks") || changed("disableOverlay") || changed("lifecycle")) {
                    if (spotlightClicks && lifecycle === LIFECYCLE.TOOLTIP) {
                        window.addEventListener("mousemove", this.handleMouseMove, false);
                    } else if (lifecycle !== LIFECYCLE.TOOLTIP) {
                        window.removeEventListener("mousemove", this.handleMouseMove);
                    }
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var _this_scrollParent;
                this.isActive = false;
                window.removeEventListener("mousemove", this.handleMouseMove);
                window.removeEventListener("resize", this.handleResize);
                clearTimeout(this.resizeTimeout);
                clearTimeout(this.scrollTimeout);
                (_this_scrollParent = this.scrollParent) === null || _this_scrollParent === void 0 ? void 0 : _this_scrollParent.removeEventListener("scroll", this.handleScroll);
            }
        },
        {
            key: "spotlightStyles",
            get: function get() {
                var showSpotlight = this.state.showSpotlight;
                var _this_props = this.props, _this_props_disableScrollParentFix = _this_props.disableScrollParentFix, disableScrollParentFix = _this_props_disableScrollParentFix === void 0 ? false : _this_props_disableScrollParentFix, spotlightClicks = _this_props.spotlightClicks, _this_props_spotlightPadding = _this_props.spotlightPadding, spotlightPadding = _this_props_spotlightPadding === void 0 ? 0 : _this_props_spotlightPadding, styles = _this_props.styles, target = _this_props.target;
                var element = getElement(target);
                var elementRect = getClientRect(element);
                var isFixedTarget = hasPosition(element);
                var top = getElementPosition(element, spotlightPadding, disableScrollParentFix);
                var _elementRect_height, _elementRect_left, _elementRect_width;
                return _object_spread_props(_object_spread({}, isLegacy() ? styles.spotlightLegacy : styles.spotlight), {
                    height: Math.round(((_elementRect_height = elementRect === null || elementRect === void 0 ? void 0 : elementRect.height) !== null && _elementRect_height !== void 0 ? _elementRect_height : 0) + spotlightPadding * 2),
                    left: Math.round(((_elementRect_left = elementRect === null || elementRect === void 0 ? void 0 : elementRect.left) !== null && _elementRect_left !== void 0 ? _elementRect_left : 0) - spotlightPadding),
                    opacity: showSpotlight ? 1 : 0,
                    pointerEvents: spotlightClicks ? "none" : "auto",
                    position: isFixedTarget ? "fixed" : "absolute",
                    top: top,
                    transition: "opacity 0.2s",
                    width: Math.round(((_elementRect_width = elementRect === null || elementRect === void 0 ? void 0 : elementRect.width) !== null && _elementRect_width !== void 0 ? _elementRect_width : 0) + spotlightPadding * 2)
                });
            }
        },
        {
            key: "updateState",
            value: function updateState(state) {
                if (!this.isActive) {
                    return;
                }
                this.setState(function(previousState) {
                    return _object_spread({}, previousState, state);
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_state = this.state, mouseOverSpotlight = _this_state.mouseOverSpotlight, showSpotlight = _this_state.showSpotlight;
                var _this_props = this.props, disableOverlay = _this_props.disableOverlay, disableOverlayClose = _this_props.disableOverlayClose, lifecycle = _this_props.lifecycle, onClickOverlay = _this_props.onClickOverlay, placement = _this_props.placement, styles = _this_props.styles;
                if (disableOverlay || lifecycle !== LIFECYCLE.TOOLTIP) {
                    return null;
                }
                var baseStyles = styles.overlay;
                if (isLegacy()) {
                    baseStyles = placement === "center" ? styles.overlayLegacyCenter : styles.overlayLegacy;
                }
                var stylesOverlay = _object_spread({
                    cursor: disableOverlayClose ? "default" : "pointer",
                    height: getDocumentHeight(),
                    pointerEvents: mouseOverSpotlight ? "none" : "auto"
                }, baseStyles);
                var spotlight2 = placement !== "center" && showSpotlight && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Spotlight_default, {
                    styles: this.spotlightStyles
                });
                if (getBrowser() === "safari") {
                    var mixBlendMode = stylesOverlay.mixBlendMode, zIndex = stylesOverlay.zIndex, safarOverlay = _object_without_properties(stylesOverlay, [
                        "mixBlendMode",
                        "zIndex"
                    ]);
                    spotlight2 = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", {
                        style: _object_spread({}, safarOverlay),
                        children: spotlight2
                    });
                    delete stylesOverlay.backgroundColor;
                }
                return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", {
                    className: "react-joyride__overlay",
                    onClick: onClickOverlay,
                    role: "presentation",
                    style: stylesOverlay,
                    children: spotlight2
                });
            }
        }
    ]);
    return JoyrideOverlay;
}(React2.Component);
// src/components/Portal.tsx
var React3 = __toESM(require("react"));
var ReactDOM = __toESM(require("react-dom"));
var JoyridePortal = /*#__PURE__*/ function(_React3_Component) {
    _inherits(JoyridePortal, _React3_Component);
    var _super = _create_super(JoyridePortal);
    function JoyridePortal() {
        _class_call_check(this, JoyridePortal);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        __publicField(_assert_this_initialized(_this), "node", null);
        return _this;
    }
    _create_class(JoyridePortal, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var id = this.props.id;
                if (!canUseDOM()) {
                    return;
                }
                this.node = document.createElement("div");
                this.node.id = id;
                document.body.appendChild(this.node);
                if (!isReact16) {
                    this.renderReact15();
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
                if (!canUseDOM()) {
                    return;
                }
                if (!isReact16) {
                    this.renderReact15();
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (!canUseDOM() || !this.node) {
                    return;
                }
                if (!isReact16) {
                    ReactDOM.unmountComponentAtNode(this.node);
                }
                if (this.node.parentNode === document.body) {
                    document.body.removeChild(this.node);
                    this.node = null;
                }
            }
        },
        {
            key: "renderReact15",
            value: function renderReact15() {
                if (!canUseDOM()) {
                    return;
                }
                var children = this.props.children;
                if (this.node) {
                    ReactDOM.unstable_renderSubtreeIntoContainer(this, children, this.node);
                }
            }
        },
        {
            key: "renderReact16",
            value: function renderReact16() {
                if (!canUseDOM() || !isReact16) {
                    return null;
                }
                var children = this.props.children;
                if (!this.node) {
                    return null;
                }
                return ReactDOM.createPortal(children, this.node);
            }
        },
        {
            key: "render",
            value: function render() {
                if (!isReact16) {
                    return null;
                }
                return this.renderReact16();
            }
        }
    ]);
    return JoyridePortal;
}(React3.Component);
// src/components/Tooltip/index.tsx
var React4 = __toESM(require("react"));
// src/components/Tooltip/Container.tsx
var import_react_innertext2 = __toESM(require("react-innertext"));
// src/components/Tooltip/CloseButton.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
function JoyrideTooltipCloseButton(_param) {
    var styles = _param.styles, props = _object_without_properties(_param, [
        "styles"
    ]);
    var color = styles.color, height = styles.height, width = styles.width, style = _object_without_properties(styles, [
        "color",
        "height",
        "width"
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("button", _object_spread_props(_object_spread({
        style: style,
        type: "button"
    }, props), {
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("svg", {
            height: typeof height === "number" ? "".concat(height, "px") : height,
            preserveAspectRatio: "xMidYMid",
            version: "1.1",
            viewBox: "0 0 18 18",
            width: typeof width === "number" ? "".concat(width, "px") : width,
            xmlns: "http://www.w3.org/2000/svg",
            children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("g", {
                children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", {
                    d: "M8.13911129,9.00268191 L0.171521827,17.0258467 C-0.0498027049,17.248715 -0.0498027049,17.6098394 0.171521827,17.8327545 C0.28204354,17.9443526 0.427188206,17.9998706 0.572051765,17.9998706 C0.71714958,17.9998706 0.862013139,17.9443526 0.972581703,17.8327545 L9.0000937,9.74924618 L17.0276057,17.8327545 C17.1384085,17.9443526 17.2832721,17.9998706 17.4281356,17.9998706 C17.5729992,17.9998706 17.718097,17.9443526 17.8286656,17.8327545 C18.0499901,17.6098862 18.0499901,17.2487618 17.8286656,17.0258467 L9.86135722,9.00268191 L17.8340066,0.973848225 C18.0553311,0.750979934 18.0553311,0.389855532 17.8340066,0.16694039 C17.6126821,-0.0556467968 17.254037,-0.0556467968 17.0329467,0.16694039 L9.00042166,8.25611765 L0.967006424,0.167268345 C0.745681892,-0.0553188426 0.387317931,-0.0553188426 0.165993399,0.167268345 C-0.0553311331,0.390136635 -0.0553311331,0.751261038 0.165993399,0.974176179 L8.13920499,9.00268191 L8.13911129,9.00268191 Z",
                    fill: color
                })
            })
        })
    }));
}
var CloseButton_default = JoyrideTooltipCloseButton;
// src/components/Tooltip/Container.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
function JoyrideTooltipContainer(props) {
    var backProps = props.backProps, closeProps = props.closeProps, continuous = props.continuous, index = props.index, isLastStep = props.isLastStep, primaryProps = props.primaryProps, size = props.size, skipProps = props.skipProps, step = props.step, tooltipProps = props.tooltipProps;
    var content = step.content, hideBackButton = step.hideBackButton, hideCloseButton = step.hideCloseButton, hideFooter = step.hideFooter, locale = step.locale, showProgress = step.showProgress, showSkipButton = step.showSkipButton, styles = step.styles, title = step.title;
    var back = locale.back, close = locale.close, last = locale.last, next = locale.next, skip = locale.skip;
    var output = {
        primary: close
    };
    if (continuous) {
        output.primary = isLastStep ? last : next;
        if (showProgress) {
            output.primary = /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("span", {
                children: [
                    output.primary,
                    " (",
                    index + 1,
                    "/",
                    size,
                    ")"
                ]
            });
        }
    }
    if (showSkipButton && !isLastStep) {
        output.skip = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("button", _object_spread_props(_object_spread({
            "aria-live": "off",
            "data-test-id": "button-skip",
            style: styles.buttonSkip,
            type: "button"
        }, skipProps), {
            children: skip
        }));
    }
    if (!hideBackButton && index > 0) {
        output.back = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("button", _object_spread_props(_object_spread({
            "data-test-id": "button-back",
            style: styles.buttonBack,
            type: "button"
        }, backProps), {
            children: back
        }));
    }
    output.close = !hideCloseButton && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CloseButton_default, _object_spread({
        "data-test-id": "button-close",
        styles: styles.buttonClose
    }, closeProps));
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", _object_spread_props(_object_spread({
        className: "react-joyride__tooltip",
        style: styles.tooltip
    }, tooltipProps), {
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", {
                style: styles.tooltipContainer,
                children: [
                    title && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("h4", {
                        "aria-label": (0, import_react_innertext2.default)(title),
                        style: styles.tooltipTitle,
                        children: title
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", {
                        style: styles.tooltipContent,
                        children: content
                    })
                ]
            }),
            !hideFooter && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", {
                style: styles.tooltipFooter,
                children: [
                    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", {
                        style: styles.tooltipFooterSpacer,
                        children: output.skip
                    }),
                    output.back,
                    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("button", _object_spread_props(_object_spread({
                        "data-test-id": "button-primary",
                        style: styles.buttonNext,
                        type: "button"
                    }, primaryProps), {
                        children: output.primary
                    }))
                ]
            }),
            output.close
        ]
    }), "JoyrideTooltip");
}
var Container_default = JoyrideTooltipContainer;
// src/components/Tooltip/index.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var JoyrideTooltip = /*#__PURE__*/ function(_React4_Component) {
    _inherits(JoyrideTooltip, _React4_Component);
    var _super = _create_super(JoyrideTooltip);
    function JoyrideTooltip() {
        _class_call_check(this, JoyrideTooltip);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        __publicField(_assert_this_initialized(_this), "handleClickBack", function(event) {
            event.preventDefault();
            var helpers = _this.props.helpers;
            helpers.prev();
        });
        __publicField(_assert_this_initialized(_this), "handleClickClose", function(event) {
            event.preventDefault();
            var helpers = _this.props.helpers;
            helpers.close();
        });
        __publicField(_assert_this_initialized(_this), "handleClickPrimary", function(event) {
            event.preventDefault();
            var _this_props = _this.props, continuous = _this_props.continuous, helpers = _this_props.helpers;
            if (!continuous) {
                helpers.close();
                return;
            }
            helpers.next();
        });
        __publicField(_assert_this_initialized(_this), "handleClickSkip", function(event) {
            event.preventDefault();
            var helpers = _this.props.helpers;
            helpers.skip();
        });
        __publicField(_assert_this_initialized(_this), "getElementsProps", function() {
            var _this_props = _this.props, continuous = _this_props.continuous, isLastStep = _this_props.isLastStep, setTooltipRef = _this_props.setTooltipRef, step = _this_props.step;
            var back = getText(step.locale.back);
            var close = getText(step.locale.close);
            var last = getText(step.locale.last);
            var next = getText(step.locale.next);
            var skip = getText(step.locale.skip);
            var primaryText = continuous ? next : close;
            if (isLastStep) {
                primaryText = last;
            }
            return {
                backProps: {
                    "aria-label": back,
                    "data-action": "back",
                    onClick: _this.handleClickBack,
                    role: "button",
                    title: back
                },
                closeProps: {
                    "aria-label": close,
                    "data-action": "close",
                    onClick: _this.handleClickClose,
                    role: "button",
                    title: close
                },
                primaryProps: {
                    "aria-label": primaryText,
                    "data-action": "primary",
                    onClick: _this.handleClickPrimary,
                    role: "button",
                    title: primaryText
                },
                skipProps: {
                    "aria-label": skip,
                    "data-action": "skip",
                    onClick: _this.handleClickSkip,
                    role: "button",
                    title: skip
                },
                tooltipProps: {
                    "aria-modal": true,
                    ref: setTooltipRef,
                    role: "alertdialog"
                }
            };
        });
        return _this;
    }
    _create_class(JoyrideTooltip, [
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, continuous = _this_props.continuous, index = _this_props.index, isLastStep = _this_props.isLastStep, setTooltipRef = _this_props.setTooltipRef, size = _this_props.size, step = _this_props.step;
                var beaconComponent = step.beaconComponent, tooltipComponent = step.tooltipComponent, cleanStep = _object_without_properties(step, [
                    "beaconComponent",
                    "tooltipComponent"
                ]);
                var component;
                if (tooltipComponent) {
                    var renderProps = _object_spread_props(_object_spread({}, this.getElementsProps()), {
                        continuous: continuous,
                        index: index,
                        isLastStep: isLastStep,
                        size: size,
                        step: cleanStep,
                        setTooltipRef: setTooltipRef
                    });
                    var TooltipComponent = tooltipComponent;
                    component = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(TooltipComponent, _object_spread({}, renderProps));
                } else {
                    component = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Container_default, _object_spread_props(_object_spread({}, this.getElementsProps()), {
                        continuous: continuous,
                        index: index,
                        isLastStep: isLastStep,
                        size: size,
                        step: step
                    }));
                }
                return component;
            }
        }
    ]);
    return JoyrideTooltip;
}(React4.Component);
// src/components/Step.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var JoyrideStep = /*#__PURE__*/ function(_React5_Component) {
    _inherits(JoyrideStep, _React5_Component);
    var _super = _create_super(JoyrideStep);
    function JoyrideStep() {
        _class_call_check(this, JoyrideStep);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        __publicField(_assert_this_initialized(_this), "beaconPopper", null);
        __publicField(_assert_this_initialized(_this), "scope", null);
        __publicField(_assert_this_initialized(_this), "tooltip", null);
        __publicField(_assert_this_initialized(_this), "tooltipPopper", null);
        /**
     * Beacon click/hover event listener
     */ __publicField(_assert_this_initialized(_this), "handleClickHoverBeacon", function(event) {
            var _this_props = _this.props, step = _this_props.step, update = _this_props.update;
            if (event.type === "mouseenter" && step.event !== "hover") {
                return;
            }
            update({
                lifecycle: LIFECYCLE.TOOLTIP
            });
        });
        __publicField(_assert_this_initialized(_this), "handleClickOverlay", function() {
            var _this_props = _this.props, helpers = _this_props.helpers, step = _this_props.step;
            if (!step.disableOverlayClose) {
                helpers.close();
            }
        });
        __publicField(_assert_this_initialized(_this), "setTooltipRef", function(element) {
            _this.tooltip = element;
        });
        __publicField(_assert_this_initialized(_this), "setPopper", function(popper, type) {
            var _this_props = _this.props, action = _this_props.action, setPopper = _this_props.setPopper, update = _this_props.update;
            if (type === "wrapper") {
                _this.beaconPopper = popper;
            } else {
                _this.tooltipPopper = popper;
            }
            setPopper === null || setPopper === void 0 ? void 0 : setPopper(popper, type);
            if (_this.beaconPopper && _this.tooltipPopper) {
                update({
                    action: action,
                    lifecycle: LIFECYCLE.READY
                });
            }
        });
        __publicField(_assert_this_initialized(_this), "renderTooltip", function(renderProps) {
            var _this_props = _this.props, continuous = _this_props.continuous, helpers = _this_props.helpers, index = _this_props.index, size = _this_props.size, step = _this_props.step;
            return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(JoyrideTooltip, _object_spread({
                continuous: continuous,
                helpers: helpers,
                index: index,
                isLastStep: index + 1 === size,
                setTooltipRef: _this.setTooltipRef,
                size: size,
                step: step
            }, renderProps));
        });
        return _this;
    }
    _create_class(JoyrideStep, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this_props = this.props, debug = _this_props.debug, index = _this_props.index;
                log({
                    title: "step:".concat(index),
                    data: [
                        {
                            key: "props",
                            value: this.props
                        }
                    ],
                    debug: debug
                });
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(previousProps) {
                var _this_props = this.props, action = _this_props.action, callback = _this_props.callback, continuous = _this_props.continuous, controlled = _this_props.controlled, debug = _this_props.debug, index = _this_props.index, lifecycle = _this_props.lifecycle, size = _this_props.size, status = _this_props.status, step = _this_props.step, update = _this_props.update;
                var _ref = (0, import_tree_changes2.default)(previousProps, this.props), changed = _ref.changed, changedFrom = _ref.changedFrom;
                var state = {
                    action: action,
                    controlled: controlled,
                    index: index,
                    lifecycle: lifecycle,
                    size: size,
                    status: status
                };
                var skipBeacon = continuous && action !== ACTIONS.CLOSE && (index > 0 || action === ACTIONS.PREV);
                var hasStoreChanged = changed("action") || changed("index") || changed("lifecycle") || changed("status");
                var isInitial = changedFrom("lifecycle", [
                    LIFECYCLE.TOOLTIP,
                    LIFECYCLE.INIT
                ], LIFECYCLE.INIT);
                var isAfterAction = changed("action", [
                    ACTIONS.NEXT,
                    ACTIONS.PREV,
                    ACTIONS.SKIP,
                    ACTIONS.CLOSE
                ]);
                var isControlled = controlled && index === previousProps.index;
                if (isAfterAction && (isInitial || isControlled)) {
                    callback(_object_spread_props(_object_spread({}, state), {
                        index: previousProps.index,
                        lifecycle: LIFECYCLE.COMPLETE,
                        step: previousProps.step,
                        type: EVENTS.STEP_AFTER
                    }));
                }
                if (step.placement === "center" && status === STATUS.RUNNING && changed("index") && action !== ACTIONS.START && lifecycle === LIFECYCLE.INIT) {
                    update({
                        lifecycle: LIFECYCLE.READY
                    });
                }
                if (hasStoreChanged) {
                    var element = getElement(step.target);
                    var elementExists = !!element;
                    var hasRenderedTarget = elementExists && isElementVisible(element);
                    if (hasRenderedTarget) {
                        if (changedFrom("status", STATUS.READY, STATUS.RUNNING) || changedFrom("lifecycle", LIFECYCLE.INIT, LIFECYCLE.READY)) {
                            callback(_object_spread_props(_object_spread({}, state), {
                                step: step,
                                type: EVENTS.STEP_BEFORE
                            }));
                        }
                    } else {
                        console.warn(elementExists ? "Target not visible" : "Target not mounted", step);
                        callback(_object_spread_props(_object_spread({}, state), {
                            type: EVENTS.TARGET_NOT_FOUND,
                            step: step
                        }));
                        if (!controlled) {
                            update({
                                index: index + (action === ACTIONS.PREV ? -1 : 1)
                            });
                        }
                    }
                }
                if (changedFrom("lifecycle", LIFECYCLE.INIT, LIFECYCLE.READY)) {
                    update({
                        lifecycle: hideBeacon(step) || skipBeacon ? LIFECYCLE.TOOLTIP : LIFECYCLE.BEACON
                    });
                }
                if (changed("index")) {
                    log({
                        title: "step:".concat(lifecycle),
                        data: [
                            {
                                key: "props",
                                value: this.props
                            }
                        ],
                        debug: debug
                    });
                }
                if (changed("lifecycle", LIFECYCLE.BEACON)) {
                    callback(_object_spread_props(_object_spread({}, state), {
                        step: step,
                        type: EVENTS.BEACON
                    }));
                }
                if (changed("lifecycle", LIFECYCLE.TOOLTIP)) {
                    callback(_object_spread_props(_object_spread({}, state), {
                        step: step,
                        type: EVENTS.TOOLTIP
                    }));
                    if (this.tooltip) {
                        this.scope = new Scope(this.tooltip, {
                            selector: "[data-action=primary]"
                        });
                        this.scope.setFocus();
                    }
                }
                if (changedFrom("lifecycle", [
                    LIFECYCLE.TOOLTIP,
                    LIFECYCLE.INIT
                ], LIFECYCLE.INIT)) {
                    var _this_scope;
                    (_this_scope = this.scope) === null || _this_scope === void 0 ? void 0 : _this_scope.removeScope();
                    this.beaconPopper = null;
                    this.tooltipPopper = null;
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var _this_scope;
                (_this_scope = this.scope) === null || _this_scope === void 0 ? void 0 : _this_scope.removeScope();
            }
        },
        {
            key: "open",
            get: function get() {
                var _this_props = this.props, lifecycle = _this_props.lifecycle, step = _this_props.step;
                return hideBeacon(step) || lifecycle === LIFECYCLE.TOOLTIP;
            }
        },
        {
            key: "render",
            value: function render() {
                var _this_props = this.props, continuous = _this_props.continuous, debug = _this_props.debug, index = _this_props.index, lifecycle = _this_props.lifecycle, nonce = _this_props.nonce, shouldScroll2 = _this_props.shouldScroll, size = _this_props.size, step = _this_props.step;
                var target = getElement(step.target);
                if (!validateStep(step) || !import_is_lite5.default.domElement(target)) {
                    return null;
                }
                return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", {
                    className: "react-joyride__step",
                    children: [
                        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(JoyridePortal, {
                            id: "react-joyride-portal",
                            children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(JoyrideOverlay, _object_spread_props(_object_spread({}, step), {
                                debug: debug,
                                lifecycle: lifecycle,
                                onClickOverlay: this.handleClickOverlay
                            }))
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_react_floater.default, _object_spread_props(_object_spread({
                            component: this.renderTooltip,
                            debug: debug,
                            getPopper: this.setPopper,
                            id: "react-joyride-step-".concat(index),
                            open: this.open,
                            placement: step.placement,
                            target: step.target
                        }, step.floaterProps), {
                            children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(JoyrideBeacon, {
                                beaconComponent: step.beaconComponent,
                                continuous: continuous,
                                index: index,
                                isLastStep: index + 1 === size,
                                locale: step.locale,
                                nonce: nonce,
                                onClickOrHover: this.handleClickHoverBeacon,
                                shouldFocus: shouldScroll2,
                                size: size,
                                step: step,
                                styles: step.styles
                            })
                        }))
                    ]
                }, "JoyrideStep-".concat(index));
            }
        }
    ]);
    return JoyrideStep;
}(React5.Component);
// src/components/index.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
var Joyride = /*#__PURE__*/ function(_React6_Component) {
    _inherits(Joyride, _React6_Component);
    var _super = _create_super(Joyride);
    function Joyride(props) {
        _class_call_check(this, Joyride);
        var _this;
        _this = _super.call(this, props);
        __publicField(_assert_this_initialized(_this), "helpers");
        __publicField(_assert_this_initialized(_this), "store");
        __publicField(_assert_this_initialized(_this), "beaconPopper");
        __publicField(_assert_this_initialized(_this), "tooltipPopper");
        /**
     * Trigger the callback.
     */ __publicField(_assert_this_initialized(_this), "callback", function(data) {
            var callback = _this.props.callback;
            if (import_is_lite6.default.function(callback)) {
                callback(data);
            }
        });
        /**
     * Keydown event listener
     */ __publicField(_assert_this_initialized(_this), "handleKeyboard", function(event) {
            var _this_state = _this.state, index = _this_state.index, lifecycle = _this_state.lifecycle;
            var steps = _this.props.steps;
            var step = steps[index];
            var intKey = window.Event ? event.which : event.keyCode;
            if (lifecycle === LIFECYCLE.TOOLTIP) {
                if (intKey === 27 && step && !step.disableCloseOnEsc) {
                    _this.store.close();
                }
            }
        });
        /**
     * Sync the store with the component's state
     */ __publicField(_assert_this_initialized(_this), "syncState", function(state) {
            _this.setState(state);
        });
        __publicField(_assert_this_initialized(_this), "setPopper", function(popper, type) {
            if (type === "wrapper") {
                _this.beaconPopper = popper;
            } else {
                _this.tooltipPopper = popper;
            }
        });
        var debug = props.debug, getHelpers = props.getHelpers, run = props.run, stepIndex = props.stepIndex;
        _this.store = createStore(_object_spread_props(_object_spread({}, props), {
            controlled: run && import_is_lite6.default.number(stepIndex)
        }));
        _this.helpers = _this.store.getHelpers();
        var addListener = _this.store.addListener;
        log({
            title: "init",
            data: [
                {
                    key: "props",
                    value: _this.props
                },
                {
                    key: "state",
                    value: _this.state
                }
            ],
            debug: debug
        });
        addListener(_this.syncState);
        if (getHelpers) {
            getHelpers(_this.helpers);
        }
        _this.state = _this.store.getState();
        return _this;
    }
    _create_class(Joyride, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (!canUseDOM()) {
                    return;
                }
                var _this_props = this.props, debug = _this_props.debug, disableCloseOnEsc = _this_props.disableCloseOnEsc, run = _this_props.run, steps = _this_props.steps;
                var start = this.store.start;
                if (validateSteps(steps, debug) && run) {
                    start();
                }
                if (!disableCloseOnEsc) {
                    document.body.addEventListener("keydown", this.handleKeyboard, {
                        passive: true
                    });
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(previousProps, previousState) {
                if (!canUseDOM()) {
                    return;
                }
                var _this_state = this.state, action = _this_state.action, controlled = _this_state.controlled, index = _this_state.index, lifecycle = _this_state.lifecycle, status = _this_state.status;
                var _this_props = this.props, debug = _this_props.debug, run = _this_props.run, stepIndex = _this_props.stepIndex, steps = _this_props.steps;
                var previousStepIndex = previousProps.stepIndex, previousSteps = previousProps.steps;
                var _this_store = this.store, reset = _this_store.reset, setSteps = _this_store.setSteps, start = _this_store.start, stop = _this_store.stop, update = _this_store.update;
                var _ref = (0, import_tree_changes3.default)(previousProps, this.props), changedProps = _ref.changed;
                var _ref1 = (0, import_tree_changes3.default)(previousState, this.state), changed = _ref1.changed, changedFrom = _ref1.changedFrom;
                var step = getMergedStep(steps[index], this.props);
                var stepsChanged = !(0, import_deep_equal.default)(previousSteps, steps);
                var stepIndexChanged = import_is_lite6.default.number(stepIndex) && changedProps("stepIndex");
                var target = getElement(step.target);
                if (stepsChanged) {
                    if (validateSteps(steps, debug)) {
                        setSteps(steps);
                    } else {
                        console.warn("Steps are not valid", steps);
                    }
                }
                if (changedProps("run")) {
                    if (run) {
                        start(stepIndex);
                    } else {
                        stop();
                    }
                }
                if (stepIndexChanged) {
                    var nextAction = import_is_lite6.default.number(previousStepIndex) && previousStepIndex < stepIndex ? ACTIONS.NEXT : ACTIONS.PREV;
                    if (action === ACTIONS.STOP) {
                        nextAction = ACTIONS.START;
                    }
                    if (![
                        STATUS.FINISHED,
                        STATUS.SKIPPED
                    ].includes(status)) {
                        update({
                            action: action === ACTIONS.CLOSE ? ACTIONS.CLOSE : nextAction,
                            index: stepIndex,
                            lifecycle: LIFECYCLE.INIT
                        });
                    }
                }
                if (!controlled && status === STATUS.RUNNING && index === 0 && !target) {
                    this.store.update({
                        index: index + 1
                    });
                    this.callback(_object_spread_props(_object_spread({}, this.state), {
                        type: EVENTS.TARGET_NOT_FOUND,
                        step: step
                    }));
                }
                var callbackData = _object_spread_props(_object_spread({}, this.state), {
                    index: index,
                    step: step
                });
                var isAfterAction = changed("action", [
                    ACTIONS.NEXT,
                    ACTIONS.PREV,
                    ACTIONS.SKIP,
                    ACTIONS.CLOSE
                ]);
                if (isAfterAction && changed("status", STATUS.PAUSED)) {
                    var previousStep = getMergedStep(steps[previousState.index], this.props);
                    this.callback(_object_spread_props(_object_spread({}, callbackData), {
                        index: previousState.index,
                        lifecycle: LIFECYCLE.COMPLETE,
                        step: previousStep,
                        type: EVENTS.STEP_AFTER
                    }));
                }
                if (changed("status", [
                    STATUS.FINISHED,
                    STATUS.SKIPPED
                ])) {
                    var previousStep1 = getMergedStep(steps[previousState.index], this.props);
                    if (!controlled) {
                        this.callback(_object_spread_props(_object_spread({}, callbackData), {
                            index: previousState.index,
                            lifecycle: LIFECYCLE.COMPLETE,
                            step: previousStep1,
                            type: EVENTS.STEP_AFTER
                        }));
                    }
                    this.callback(_object_spread_props(_object_spread({}, callbackData), {
                        type: EVENTS.TOUR_END,
                        // Return the last step when the tour is finished
                        step: previousStep1,
                        index: previousState.index
                    }));
                    reset();
                } else if (changedFrom("status", [
                    STATUS.IDLE,
                    STATUS.READY
                ], STATUS.RUNNING)) {
                    this.callback(_object_spread_props(_object_spread({}, callbackData), {
                        type: EVENTS.TOUR_START
                    }));
                } else if (changed("status") || changed("action", ACTIONS.RESET)) {
                    this.callback(_object_spread_props(_object_spread({}, callbackData), {
                        type: EVENTS.TOUR_STATUS
                    }));
                }
                this.scrollToStep(previousState);
                if (step.placement === "center" && status === STATUS.RUNNING && lifecycle === LIFECYCLE.INIT) {
                    this.store.update({
                        lifecycle: LIFECYCLE.READY
                    });
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var disableCloseOnEsc = this.props.disableCloseOnEsc;
                if (!disableCloseOnEsc) {
                    document.body.removeEventListener("keydown", this.handleKeyboard);
                }
            }
        },
        {
            key: "scrollToStep",
            value: function scrollToStep(previousState) {
                var _this_state = this.state, index = _this_state.index, lifecycle = _this_state.lifecycle, status = _this_state.status;
                var _this_props = this.props, debug = _this_props.debug, _this_props_disableScrollParentFix = _this_props.disableScrollParentFix, disableScrollParentFix = _this_props_disableScrollParentFix === void 0 ? false : _this_props_disableScrollParentFix, scrollDuration = _this_props.scrollDuration, _this_props_scrollOffset = _this_props.scrollOffset, scrollOffset = _this_props_scrollOffset === void 0 ? 20 : _this_props_scrollOffset, _this_props_scrollToFirstStep = _this_props.scrollToFirstStep, scrollToFirstStep = _this_props_scrollToFirstStep === void 0 ? false : _this_props_scrollToFirstStep, steps = _this_props.steps;
                var step = getMergedStep(steps[index], this.props);
                var target = getElement(step.target);
                var shouldScrollToStep = shouldScroll({
                    isFirstStep: index === 0,
                    lifecycle: lifecycle,
                    previousLifecycle: previousState.lifecycle,
                    scrollToFirstStep: scrollToFirstStep,
                    step: step,
                    target: target
                });
                if (status === STATUS.RUNNING && shouldScrollToStep) {
                    var hasCustomScroll = hasCustomScrollParent(target, disableScrollParentFix);
                    var scrollParent2 = getScrollParent(target, disableScrollParentFix);
                    var scrollY = Math.floor(getScrollTo(target, scrollOffset, disableScrollParentFix)) || 0;
                    log({
                        title: "scrollToStep",
                        data: [
                            {
                                key: "index",
                                value: index
                            },
                            {
                                key: "lifecycle",
                                value: lifecycle
                            },
                            {
                                key: "status",
                                value: status
                            }
                        ],
                        debug: debug
                    });
                    if (lifecycle === LIFECYCLE.BEACON && this.beaconPopper) {
                        var _this_beaconPopper = this.beaconPopper, placement = _this_beaconPopper.placement, popper = _this_beaconPopper.popper;
                        if (![
                            "bottom"
                        ].includes(placement) && !hasCustomScroll) {
                            scrollY = Math.floor(popper.top - scrollOffset);
                        }
                    } else if (lifecycle === LIFECYCLE.TOOLTIP && this.tooltipPopper) {
                        var _this_tooltipPopper = this.tooltipPopper, flipped = _this_tooltipPopper.flipped, placement1 = _this_tooltipPopper.placement, popper1 = _this_tooltipPopper.popper;
                        if ([
                            "top",
                            "right",
                            "left"
                        ].includes(placement1) && !flipped && !hasCustomScroll) {
                            scrollY = Math.floor(popper1.top - scrollOffset);
                        } else {
                            scrollY -= step.spotlightPadding;
                        }
                    }
                    scrollY = scrollY >= 0 ? scrollY : 0;
                    if (status === STATUS.RUNNING) {
                        scrollTo(scrollY, {
                            element: scrollParent2,
                            duration: scrollDuration
                        });
                    }
                }
            }
        },
        {
            key: "render",
            value: function render() {
                if (!canUseDOM()) {
                    return null;
                }
                var _this_state = this.state, index = _this_state.index, status = _this_state.status;
                var _this_props = this.props, _this_props_continuous = _this_props.continuous, continuous = _this_props_continuous === void 0 ? false : _this_props_continuous, _this_props_debug = _this_props.debug, debug = _this_props_debug === void 0 ? false : _this_props_debug, nonce = _this_props.nonce, _this_props_scrollToFirstStep = _this_props.scrollToFirstStep, scrollToFirstStep = _this_props_scrollToFirstStep === void 0 ? false : _this_props_scrollToFirstStep, steps = _this_props.steps;
                var output;
                if (status === STATUS.RUNNING && steps[index]) {
                    var step = getMergedStep(steps[index], this.props);
                    output = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(JoyrideStep, _object_spread_props(_object_spread({}, this.state), {
                        callback: this.callback,
                        continuous: continuous,
                        debug: debug,
                        helpers: this.helpers,
                        nonce: nonce,
                        setPopper: this.setPopper,
                        shouldScroll: !step.disableScrolling && (index !== 0 || scrollToFirstStep),
                        step: step,
                        update: this.store.update
                    }));
                }
                return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", {
                    className: "react-joyride",
                    children: output
                });
            }
        }
    ]);
    return Joyride;
}(React6.Component);
__publicField(Joyride, "defaultProps", defaultProps);
var components_default = Joyride;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    ACTIONS: ACTIONS,
    EVENTS: EVENTS,
    LIFECYCLE: LIFECYCLE,
    STATUS: STATUS
});
//# sourceMappingURL=index.js.map
// fix-cjs-exports
if (module.exports.default) {
  Object.assign(module.exports.default, module.exports);
  module.exports = module.exports.default;
  delete module.exports.default;
}
