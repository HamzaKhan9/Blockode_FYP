import {
  require_prop_types
} from "./chunk-HDNX3PEL.js";
import {
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn
} from "./chunk-54ZKV3VN.js";
import "./chunk-VYT6YUWU.js";
import {
  require_react
} from "./chunk-SNNC5QQA.js";
import {
  __toESM
} from "./chunk-USJHI7ER.js";

// node_modules/react-move/es/Animate/index.js
var import_react2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/react-move/es/NodeGroup/index.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(null, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

// node_modules/d3-timer/src/interval.js
function interval_default(callback, delay, time) {
  var t = new Timer(), total = delay;
  if (delay == null)
    return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}

// node_modules/kapellmeister/es/utils.js
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
var transitionId = 0;
function getTransitionId() {
  return ++transitionId;
}
function extend(obj, props) {
  for (var i in props) {
    obj[i] = props[i];
  }
}
function once(func) {
  var called = false;
  return function transitionEvent() {
    if (!called) {
      called = true;
      func.call(this);
    }
  };
}
function isNamespace(prop) {
  return _typeof(prop) === "object" && Array.isArray(prop) === false;
}
var linear = function linear2(t) {
  return +t;
};
var timingDefaults = {
  delay: 0,
  duration: 250,
  ease: linear
};

// node_modules/kapellmeister/es/Events.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var Events = function Events2(config) {
  var _this = this;
  _classCallCheck2(this, Events2);
  this.start = null;
  this.interrupt = null;
  this.end = null;
  if (config.events) {
    Object.keys(config.events).forEach(function(d) {
      if (typeof config.events[d] !== "function") {
        throw new Error("Event handlers must be a function");
      } else {
        _this[d] = once(config.events[d]);
      }
    });
  }
};
var Events_default = Events;

// node_modules/kapellmeister/es/BaseNode.js
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
var BaseNode = function() {
  function BaseNode2(state) {
    _classCallCheck3(this, BaseNode2);
    this.state = state || {};
  }
  _createClass2(BaseNode2, [{
    key: "transition",
    value: function transition(config) {
      if (Array.isArray(config)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = config[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            this.parse(item);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        this.parse(config);
      }
    }
  }, {
    key: "isTransitioning",
    value: function isTransitioning() {
      return !!this.transitionData;
    }
  }, {
    key: "stopTransitions",
    value: function stopTransitions() {
      var transitions = this.transitionData;
      if (transitions) {
        Object.keys(transitions).forEach(function(t) {
          transitions[t].timer.stop();
        });
      }
    }
  }, {
    key: "setState",
    value: function setState(update2) {
      if (typeof update2 === "function") {
        extend(this.state, update2(this.state));
      } else {
        extend(this.state, update2);
      }
    }
  }, {
    key: "parse",
    value: function parse(config) {
      var _this = this;
      var clone = _objectSpread({}, config);
      var events = new Events_default(clone);
      if (clone.events) {
        delete clone.events;
      }
      var timing = _objectSpread({}, timingDefaults, clone.timing || {}, {
        time: now()
      });
      if (clone.timing) {
        delete clone.timing;
      }
      Object.keys(clone).forEach(function(stateKey) {
        var tweens = [];
        var next = clone[stateKey];
        if (isNamespace(next)) {
          Object.keys(next).forEach(function(attr) {
            var val = next[attr];
            if (Array.isArray(val)) {
              if (val.length === 1) {
                tweens.push(_this.getTween(attr, val[0], stateKey));
              } else {
                _this.setState(function(state) {
                  var _objectSpread2, _ref;
                  return _ref = {}, _ref[stateKey] = _objectSpread({}, state[stateKey], (_objectSpread2 = {}, _objectSpread2[attr] = val[0], _objectSpread2)), _ref;
                });
                tweens.push(_this.getTween(attr, val[1], stateKey));
              }
            } else if (typeof val === "function") {
              var getNameSpacedCustomTween = function getNameSpacedCustomTween2() {
                var kapellmeisterNamespacedTween = function kapellmeisterNamespacedTween2(t) {
                  _this.setState(function(state) {
                    var _objectSpread3, _ref2;
                    return _ref2 = {}, _ref2[stateKey] = _objectSpread({}, state[stateKey], (_objectSpread3 = {}, _objectSpread3[attr] = val(t), _objectSpread3)), _ref2;
                  });
                };
                return kapellmeisterNamespacedTween;
              };
              tweens.push(getNameSpacedCustomTween);
            } else {
              _this.setState(function(state) {
                var _objectSpread4, _ref3;
                return _ref3 = {}, _ref3[stateKey] = _objectSpread({}, state[stateKey], (_objectSpread4 = {}, _objectSpread4[attr] = val, _objectSpread4)), _ref3;
              });
              tweens.push(_this.getTween(attr, val, stateKey));
            }
          });
        } else {
          if (Array.isArray(next)) {
            if (next.length === 1) {
              tweens.push(_this.getTween(stateKey, next[0], null));
            } else {
              var _this$setState;
              _this.setState((_this$setState = {}, _this$setState[stateKey] = next[0], _this$setState));
              tweens.push(_this.getTween(stateKey, next[1], null));
            }
          } else if (typeof next === "function") {
            var getCustomTween = function getCustomTween2() {
              var kapellmeisterTween = function kapellmeisterTween2(t) {
                var _this$setState2;
                _this.setState((_this$setState2 = {}, _this$setState2[stateKey] = next(t), _this$setState2));
              };
              return kapellmeisterTween;
            };
            tweens.push(getCustomTween);
          } else {
            var _this$setState3;
            _this.setState((_this$setState3 = {}, _this$setState3[stateKey] = next, _this$setState3));
            tweens.push(_this.getTween(stateKey, next, null));
          }
        }
        _this.update({
          stateKey,
          timing,
          tweens,
          events,
          status: 0
        });
      });
    }
  }, {
    key: "getTween",
    value: function getTween(attr, endValue, nameSpace) {
      var _this2 = this;
      return function() {
        var begValue = nameSpace ? _this2.state[nameSpace][attr] : _this2.state[attr];
        if (begValue === endValue) {
          return null;
        }
        var i = _this2.getInterpolator(begValue, endValue, attr, nameSpace);
        var stateTween;
        if (nameSpace === null) {
          stateTween = function stateTween2(t) {
            var _this2$setState;
            _this2.setState((_this2$setState = {}, _this2$setState[attr] = i(t), _this2$setState));
          };
        } else {
          stateTween = function stateTween2(t) {
            _this2.setState(function(state) {
              var _objectSpread5, _ref4;
              return _ref4 = {}, _ref4[nameSpace] = _objectSpread({}, state[nameSpace], (_objectSpread5 = {}, _objectSpread5[attr] = i(t), _objectSpread5)), _ref4;
            });
          };
        }
        return stateTween;
      };
    }
  }, {
    key: "update",
    value: function update2(transition) {
      if (!this.transitionData) {
        this.transitionData = {};
      }
      this.init(getTransitionId(), transition);
    }
  }, {
    key: "init",
    value: function init(id, transition) {
      var _this3 = this;
      var n = transition.tweens.length;
      var tweens = new Array(n);
      var queue = function queue2(elapsed) {
        transition.status = 1;
        transition.timer.restart(start, transition.timing.delay, transition.timing.time);
        if (transition.timing.delay <= elapsed) {
          start(elapsed - transition.timing.delay);
        }
      };
      this.transitionData[id] = transition;
      transition.timer = timer(queue, 0, transition.timing.time);
      var start = function start2(elapsed) {
        if (transition.status !== 1)
          return stop();
        for (var tid in _this3.transitionData) {
          var t = _this3.transitionData[tid];
          if (t.stateKey !== transition.stateKey) {
            continue;
          }
          if (t.status === 3) {
            return timeout_default(start2);
          }
          if (t.status === 4) {
            t.status = 6;
            t.timer.stop();
            if (t.events.interrupt) {
              t.events.interrupt.call(_this3);
            }
            delete _this3.transitionData[tid];
          } else if (+tid < id) {
            t.status = 6;
            t.timer.stop();
            delete _this3.transitionData[tid];
          }
        }
        timeout_default(function() {
          if (transition.status === 3) {
            transition.status = 4;
            transition.timer.restart(tick, transition.timing.delay, transition.timing.time);
            tick(elapsed);
          }
        });
        transition.status = 2;
        if (transition.events.start) {
          transition.events.start.call(_this3);
        }
        if (transition.status !== 2) {
          return;
        }
        transition.status = 3;
        var j = -1;
        for (var i = 0; i < n; ++i) {
          var res = transition.tweens[i]();
          if (res) {
            tweens[++j] = res;
          }
        }
        tweens.length = j + 1;
      };
      var tick = function tick2(elapsed) {
        var t = 1;
        if (elapsed < transition.timing.duration) {
          t = transition.timing.ease(elapsed / transition.timing.duration);
        } else {
          transition.timer.restart(stop);
          transition.status = 5;
        }
        var i = -1;
        while (++i < tweens.length) {
          tweens[i](t);
        }
        if (transition.status === 5) {
          if (transition.events.end) {
            transition.events.end.call(_this3);
          }
          stop();
        }
      };
      var stop = function stop2() {
        transition.status = 6;
        transition.timer.stop();
        delete _this3.transitionData[id];
        for (var _ in _this3.transitionData) {
          return;
        }
        delete _this3.transitionData;
      };
    }
  }]);
  return BaseNode2;
}();
var BaseNode_default = BaseNode;

// node_modules/react-move/es/core/mergeKeys.js
function mergeKeys(currNodeKeys, currKeyIndex, nextNodeKeys, nextKeyIndex) {
  var allKeys = [];
  for (var i = 0; i < nextNodeKeys.length; i++) {
    allKeys[i] = nextNodeKeys[i];
  }
  for (var _i = 0; _i < currNodeKeys.length; _i++) {
    if (nextKeyIndex[currNodeKeys[_i]] === void 0) {
      allKeys.push(currNodeKeys[_i]);
    }
  }
  return allKeys.sort(function(a, b) {
    var nextOrderA = nextKeyIndex[a];
    var nextOrderB = nextKeyIndex[b];
    var currOrderA = currKeyIndex[a];
    var currOrderB = currKeyIndex[b];
    if (nextOrderA != null && nextOrderB != null) {
      return nextKeyIndex[a] - nextKeyIndex[b];
    } else if (currOrderA != null && currOrderB != null) {
      return currKeyIndex[a] - currKeyIndex[b];
    } else if (nextOrderA != null) {
      for (var _i2 = 0; _i2 < nextNodeKeys.length; _i2++) {
        var pivot = nextNodeKeys[_i2];
        if (!currKeyIndex[pivot]) {
          continue;
        }
        if (nextOrderA < nextKeyIndex[pivot] && currOrderB > currKeyIndex[pivot]) {
          return -1;
        } else if (nextOrderA > nextKeyIndex[pivot] && currOrderB < currKeyIndex[pivot]) {
          return 1;
        }
      }
      return 1;
    }
    for (var _i3 = 0; _i3 < nextNodeKeys.length; _i3++) {
      var _pivot = nextNodeKeys[_i3];
      if (!currKeyIndex[_pivot]) {
        continue;
      }
      if (nextOrderB < nextKeyIndex[_pivot] && currOrderA > currKeyIndex[_pivot]) {
        return 1;
      } else if (nextOrderB > nextKeyIndex[_pivot] && currOrderA < currKeyIndex[_pivot]) {
        return -1;
      }
    }
    return -1;
  });
}
var mergeKeys_default = mergeKeys;

// node_modules/react-move/es/core/types.js
var ENTER = "ENTER";
var UPDATE = "UPDATE";
var LEAVE = "LEAVE";

// node_modules/react-move/es/utils.js
function numeric(beg, end) {
  var a = +beg;
  var b = +end - a;
  return function(t) {
    return a + b * t;
  };
}

// node_modules/react-move/es/NodeGroup/index.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var NodeGroup = function(_Component) {
  _inherits(NodeGroup2, _Component);
  var _super = _createSuper(NodeGroup2);
  function NodeGroup2(props) {
    var _this;
    _classCallCheck(this, NodeGroup2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "animate", function() {
      var _this$state = _this.state, nodeKeys = _this$state.nodeKeys, nodeHash = _this$state.nodeHash;
      if (_this.unmounting) {
        return;
      }
      var pending = false;
      var nextNodeKeys = [];
      var length = nodeKeys.length;
      for (var i = 0; i < length; i++) {
        var k = nodeKeys[i];
        var n = nodeHash[k];
        var isTransitioning = n.isTransitioning();
        if (isTransitioning) {
          pending = true;
        }
        if (n.type === LEAVE && !isTransitioning) {
          delete nodeHash[k];
        } else {
          nextNodeKeys.push(k);
        }
      }
      if (!pending) {
        _this.interval.stop();
      }
      _this.setState(function() {
        return {
          nodeKeys: nextNodeKeys,
          nodes: nextNodeKeys.map(function(key) {
            return nodeHash[key];
          })
        };
      });
    });
    _defineProperty(_assertThisInitialized(_this), "interval", null);
    _defineProperty(_assertThisInitialized(_this), "unmounting", false);
    var interpolation = props.interpolation;
    var Node = function(_BaseNode) {
      _inherits(Node2, _BaseNode);
      var _super2 = _createSuper(Node2);
      function Node2(key, data) {
        var _this2;
        _classCallCheck(this, Node2);
        _this2 = _super2.call(this);
        _defineProperty(_assertThisInitialized(_this2), "getInterpolator", interpolation);
        _this2.key = key;
        _this2.data = data;
        _this2.type = ENTER;
        return _this2;
      }
      return Node2;
    }(BaseNode_default);
    _this.state = {
      Node,
      nodeKeys: [],
      nodeHash: {},
      nodes: [],
      data: null
    };
    return _this;
  }
  _createClass(NodeGroup2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startInterval();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.data !== this.props.data && !this.unmounting) {
        this.startInterval();
      }
    }
  }, {
    key: "startInterval",
    value: function startInterval() {
      if (!this.interval) {
        this.interval = interval_default(this.animate);
      } else {
        this.interval.restart(this.animate);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$state2 = this.state, nodeKeys = _this$state2.nodeKeys, nodeHash = _this$state2.nodeHash;
      this.unmounting = true;
      if (this.interval) {
        this.interval.stop();
      }
      nodeKeys.forEach(function(key) {
        nodeHash[key].stopTransitions();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var renderedChildren = this.props.children(this.state.nodes);
      return renderedChildren && import_react.default.Children.only(renderedChildren);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.data !== prevState.data) {
        var data = nextProps.data, keyAccessor3 = nextProps.keyAccessor, start = nextProps.start, enter2 = nextProps.enter, update2 = nextProps.update, leave2 = nextProps.leave;
        var Node = prevState.Node, nodeKeys = prevState.nodeKeys, nodeHash = prevState.nodeHash;
        var keyIndex = {};
        for (var i = 0; i < nodeKeys.length; i++) {
          keyIndex[nodeKeys[i]] = i;
        }
        var nextKeyIndex = {};
        var nextNodeKeys = [];
        for (var _i = 0; _i < data.length; _i++) {
          var d = data[_i];
          var k = keyAccessor3(d, _i);
          nextKeyIndex[k] = _i;
          nextNodeKeys.push(k);
          if (keyIndex[k] === void 0) {
            var node = new Node();
            node.key = k;
            node.data = d;
            node.type = ENTER;
            nodeHash[k] = node;
          }
        }
        for (var _i2 = 0; _i2 < nodeKeys.length; _i2++) {
          var _k = nodeKeys[_i2];
          var n = nodeHash[_k];
          if (nextKeyIndex[_k] !== void 0) {
            n.data = data[nextKeyIndex[_k]];
            n.type = UPDATE;
          } else {
            n.type = LEAVE;
          }
        }
        var mergedNodeKeys = mergeKeys_default(nodeKeys, keyIndex, nextNodeKeys, nextKeyIndex);
        for (var _i3 = 0; _i3 < mergedNodeKeys.length; _i3++) {
          var _k2 = mergedNodeKeys[_i3];
          var _n = nodeHash[_k2];
          var _d = _n.data;
          if (_n.type === ENTER) {
            _n.setState(start(_d, nextKeyIndex[_k2]));
            _n.transition(enter2(_d, nextKeyIndex[_k2]));
          } else if (_n.type === LEAVE) {
            _n.transition(leave2(_d, keyIndex[_k2]));
          } else {
            _n.transition(update2(_d, nextKeyIndex[_k2]));
          }
        }
        return {
          data,
          nodes: mergedNodeKeys.map(function(key) {
            return nodeHash[key];
          }),
          nodeHash,
          nodeKeys: mergedNodeKeys
        };
      }
      return null;
    }
  }]);
  return NodeGroup2;
}(import_react.Component);
NodeGroup.propTypes = true ? {
  data: import_prop_types.default.array.isRequired,
  keyAccessor: import_prop_types.default.func.isRequired,
  interpolation: import_prop_types.default.func,
  start: import_prop_types.default.func.isRequired,
  enter: import_prop_types.default.func,
  update: import_prop_types.default.func,
  leave: import_prop_types.default.func,
  children: import_prop_types.default.func.isRequired
} : {};
NodeGroup.defaultProps = {
  enter: function enter() {
  },
  update: function update() {
  },
  leave: function leave() {
  },
  interpolation: numeric
};
var NodeGroup_default = NodeGroup;

// node_modules/react-move/es/Animate/index.js
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var keyAccessor = function keyAccessor2() {
  return "$$key$$";
};
var Animate = function(_Component) {
  _inherits(Animate2, _Component);
  var _super = _createSuper2(Animate2);
  function Animate2() {
    _classCallCheck(this, Animate2);
    return _super.apply(this, arguments);
  }
  _createClass(Animate2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, show = _this$props.show, start = _this$props.start, enter2 = _this$props.enter, update2 = _this$props.update, leave2 = _this$props.leave, interpolation = _this$props.interpolation, children = _this$props.children;
      var data = typeof start === "function" ? start() : start;
      return import_react2.default.createElement(NodeGroup_default, {
        data: show ? [data] : [],
        start: function start2() {
          return data;
        },
        keyAccessor,
        interpolation,
        enter: typeof enter2 === "function" ? enter2 : function() {
          return enter2;
        },
        update: typeof update2 === "function" ? update2 : function() {
          return update2;
        },
        leave: typeof leave2 === "function" ? leave2 : function() {
          return leave2;
        }
      }, function(nodes) {
        if (!nodes[0]) {
          return null;
        }
        var renderedChildren = children(nodes[0].state);
        return renderedChildren && import_react2.default.Children.only(renderedChildren);
      });
    }
  }]);
  return Animate2;
}(import_react2.Component);
Animate.propTypes = true ? {
  show: import_prop_types2.default.bool,
  interpolation: import_prop_types2.default.func,
  start: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]),
  enter: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.array, import_prop_types2.default.object]),
  update: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.array, import_prop_types2.default.object]),
  leave: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.array, import_prop_types2.default.object]),
  children: import_prop_types2.default.func.isRequired
} : {};
Animate.defaultProps = {
  show: true,
  interpolation: numeric
};
var Animate_default = Animate;
export {
  Animate_default as Animate,
  NodeGroup_default as NodeGroup
};
//# sourceMappingURL=react-move.js.map
