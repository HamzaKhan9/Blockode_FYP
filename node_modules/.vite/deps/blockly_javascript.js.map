{
  "version": 3,
  "sources": ["../../blockly/generators/javascript.js", "../../blockly/generators/javascript/colour.js", "../../blockly/generators/javascript/lists.js", "../../blockly/generators/javascript/logic.js", "../../blockly/generators/javascript/loops.js", "../../blockly/generators/javascript/math.js", "../../blockly/generators/javascript/procedures.js", "../../blockly/generators/javascript/text.js", "../../blockly/generators/javascript/variables.js", "../../blockly/generators/javascript/variables_dynamic.js", "../../blockly/generators/javascript/all.js", "../../blockly/javascript.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @suppress {checkTypes|globalThis}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript');\n\nconst Variables = goog.require('Blockly.Variables');\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {Block} = goog.requireType('Blockly.Block');\nconst {CodeGenerator} = goog.require('Blockly.CodeGenerator');\nconst {inputTypes} = goog.require('Blockly.inputTypes');\nconst {Names, NameType} = goog.require('Blockly.Names');\nconst {Workspace} = goog.requireType('Blockly.Workspace');\n\n\n/**\n * JavaScript code generator.\n * @type {!CodeGenerator}\n */\nconst JavaScript = new CodeGenerator('JavaScript');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n */\nJavaScript.addReservedWords(\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n    'break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,' +\n    'enum,' +\n    'implements,interface,let,package,private,protected,public,static,' +\n    'await,' +\n    'null,true,false,' +\n    // Magic variable.\n    'arguments,' +\n    // Everything in the current environment (835 items in Chrome, 104 in Node).\n    Object.getOwnPropertyNames(globalThis).join(','));\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\nJavaScript.ORDER_ATOMIC = 0;            // 0 \"\" ...\nJavaScript.ORDER_NEW = 1.1;             // new\nJavaScript.ORDER_MEMBER = 1.2;          // . []\nJavaScript.ORDER_FUNCTION_CALL = 2;     // ()\nJavaScript.ORDER_INCREMENT = 3;         // ++\nJavaScript.ORDER_DECREMENT = 3;         // --\nJavaScript.ORDER_BITWISE_NOT = 4.1;     // ~\nJavaScript.ORDER_UNARY_PLUS = 4.2;      // +\nJavaScript.ORDER_UNARY_NEGATION = 4.3;  // -\nJavaScript.ORDER_LOGICAL_NOT = 4.4;     // !\nJavaScript.ORDER_TYPEOF = 4.5;          // typeof\nJavaScript.ORDER_VOID = 4.6;            // void\nJavaScript.ORDER_DELETE = 4.7;          // delete\nJavaScript.ORDER_AWAIT = 4.8;           // await\nJavaScript.ORDER_EXPONENTIATION = 5.0;  // **\nJavaScript.ORDER_MULTIPLICATION = 5.1;  // *\nJavaScript.ORDER_DIVISION = 5.2;        // /\nJavaScript.ORDER_MODULUS = 5.3;         // %\nJavaScript.ORDER_SUBTRACTION = 6.1;     // -\nJavaScript.ORDER_ADDITION = 6.2;        // +\nJavaScript.ORDER_BITWISE_SHIFT = 7;     // << >> >>>\nJavaScript.ORDER_RELATIONAL = 8;        // < <= > >=\nJavaScript.ORDER_IN = 8;                // in\nJavaScript.ORDER_INSTANCEOF = 8;        // instanceof\nJavaScript.ORDER_EQUALITY = 9;          // == != === !==\nJavaScript.ORDER_BITWISE_AND = 10;      // &\nJavaScript.ORDER_BITWISE_XOR = 11;      // ^\nJavaScript.ORDER_BITWISE_OR = 12;       // |\nJavaScript.ORDER_LOGICAL_AND = 13;      // &&\nJavaScript.ORDER_LOGICAL_OR = 14;       // ||\nJavaScript.ORDER_CONDITIONAL = 15;      // ?:\nJavaScript.ORDER_ASSIGNMENT = 16;       // = += -= **= *= /= %= <<= >>= ...\nJavaScript.ORDER_YIELD = 17;            // yield\nJavaScript.ORDER_COMMA = 18;            // ,\nJavaScript.ORDER_NONE = 99;             // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array<!Array<number>>}\n */\nJavaScript.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [JavaScript.ORDER_FUNCTION_CALL, JavaScript.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [JavaScript.ORDER_MEMBER, JavaScript.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [JavaScript.ORDER_LOGICAL_NOT, JavaScript.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [JavaScript.ORDER_MULTIPLICATION, JavaScript.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [JavaScript.ORDER_ADDITION, JavaScript.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [JavaScript.ORDER_LOGICAL_AND, JavaScript.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [JavaScript.ORDER_LOGICAL_OR, JavaScript.ORDER_LOGICAL_OR]\n];\n\n/**\n * Whether the init method has been called.\n * @type {?boolean}\n */\nJavaScript.isInitialized = false;\n\n/**\n * Initialise the database of variable names.\n * @param {!Workspace} workspace Workspace to generate code from.\n */\nJavaScript.init = function(workspace) {\n  // Call Blockly.CodeGenerator's init.\n  Object.getPrototypeOf(this).init.call(this);\n\n  if (!this.nameDB_) {\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\n  } else {\n    this.nameDB_.reset();\n  }\n\n  this.nameDB_.setVariableMap(workspace.getVariableMap());\n  this.nameDB_.populateVariables(workspace);\n  this.nameDB_.populateProcedures(workspace);\n\n  const defvars = [];\n  // Add developer variables (not created or named by the user).\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    defvars.push(\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  const variables = Variables.allUsedVarModels(workspace);\n  for (let i = 0; i < variables.length; i++) {\n    defvars.push(this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n  }\n  this.isInitialized = true;\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nJavaScript.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  const definitions = Object.values(this.definitions_);\n  // Call Blockly.CodeGenerator's finish.\n  code = Object.getPrototypeOf(this).finish.call(this, code);\n  this.isInitialized = false;\n\n  this.nameDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nJavaScript.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n               .replace(/\\n/g, '\\\\\\n')\n               .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline JavaScript string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @protected\n */\nJavaScript.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  const lines = string.split(/\\n/g).map(this.quote_);\n  return lines.join(' + \\'\\\\n\\' +\\n');\n};\n\n/**\n * Common tasks for generating JavaScript from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Block} block The current block.\n * @param {string} code The JavaScript code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} JavaScript code with comments and subsequent blocks added.\n * @protected\n */\nJavaScript.scrub_ = function(block, code, opt_thisOnly) {\n  let commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    let comment = block.getCommentText();\n    if (comment) {\n      comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n      commentCode += this.prefixLines(comment + '\\n', '// ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (let i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type === inputTypes.VALUE) {\n        const childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = this.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += this.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nJavaScript.getAdjusted = function(\n    block, atId, opt_delta, opt_negate, opt_order) {\n  let delta = opt_delta || 0;\n  let order = opt_order || this.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n  let innerOrder;\n  let outerOrder = order;\n  if (delta > 0) {\n    outerOrder = this.ORDER_ADDITION;\n    innerOrder = this.ORDER_ADDITION;\n  } else if (delta < 0) {\n    outerOrder = this.ORDER_SUBTRACTION;\n    innerOrder = this.ORDER_SUBTRACTION;\n  } else if (opt_negate) {\n    outerOrder = this.ORDER_UNARY_NEGATION;\n    innerOrder = this.ORDER_UNARY_NEGATION;\n  }\n\n  let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n  if (stringUtils.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n\nexports.javascriptGenerator = JavaScript;\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for colour blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.colour');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['colour_picker'] = function(block) {\n  // Colour picker.\n  const code = JavaScript.quote_(block.getFieldValue('COLOUR'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['colour_random'] = function(block) {\n  // Generate a random colour.\n  const functionName = JavaScript.provideFunction_('colourRandom', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`);\n  const code = functionName + '()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = JavaScript.valueToCode(block, 'RED', JavaScript.ORDER_NONE) || 0;\n  const green =\n      JavaScript.valueToCode(block, 'GREEN', JavaScript.ORDER_NONE) || 0;\n  const blue =\n      JavaScript.valueToCode(block, 'BLUE', JavaScript.ORDER_NONE) || 0;\n  const functionName = JavaScript.provideFunction_('colourRgb', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['colour_blend'] = function(block) {\n  // Blend two colours together.\n  const c1 = JavaScript.valueToCode(block, 'COLOUR1', JavaScript.ORDER_NONE) ||\n      \"'#000000'\";\n  const c2 = JavaScript.valueToCode(block, 'COLOUR2', JavaScript.ORDER_NONE) ||\n      \"'#000000'\";\n  const ratio =\n      JavaScript.valueToCode(block, 'RATIO', JavaScript.ORDER_NONE) || 0.5;\n  const functionName = JavaScript.provideFunction_('colourBlend', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for list blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.lists');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        JavaScript.valueToCode(block, 'ADD' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  const functionName = JavaScript.provideFunction_('listsRepeat', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`);\n  const element =\n      JavaScript.valueToCode(block, 'ITEM', JavaScript.ORDER_NONE) || 'null';\n  const repeatCount =\n      JavaScript.valueToCode(block, 'NUM', JavaScript.ORDER_NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_length'] = function(block) {\n  // String or array length.\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return [list + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  return ['!' + list + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item =\n      JavaScript.valueToCode(block, 'FIND', JavaScript.ORDER_NONE) || \"''\";\n  const list =\n      JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? JavaScript.ORDER_NONE : JavaScript.ORDER_MEMBER;\n  const list = JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, JavaScript.ORDER_MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      const functionName = JavaScript.provideFunction_('listsGetRandomItem', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`);\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, JavaScript.ORDER_FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nJavaScript['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) ||\n      'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        JavaScript.nameDB_.getDistinctName('tmpList', NameType.VARIABLE);\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case ('FIRST'):\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case ('LAST'):\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case ('FROM_START'): {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case ('FROM_END'): {\n      const at = JavaScript.getAdjusted(\n          block, 'AT', 1, false, JavaScript.ORDER_SUBTRACTION);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + list + '.length - ' + at + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case ('RANDOM'): {\n      let code = cacheList();\n      const xVar =\n          JavaScript.nameDB_.getDistinctName('tmpX', NameType.VARIABLE);\n      code += 'var ' + xVar + ' = Math.floor(Math.random() * ' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['lists_getSublist'] = function(block) {\n  // Get sublist.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n      list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(\n            block, 'AT1', 1, false, JavaScript.ORDER_SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(\n            block, 'AT2', 0, false, JavaScript.ORDER_SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {\n      'FIRST': 'First',\n      'LAST': 'Last',\n      'FROM_START': 'FromStart',\n      'FROM_END': 'FromEnd',\n    };\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName =\n      JavaScript.provideFunction_('listsGetSortCompare', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n  return [\n    list + '.slice().sort(' + getCompareFunctionName + '(\"' + type + '\", ' +\n        direction + '))',\n    JavaScript.ORDER_FUNCTION_CALL\n  ];\n};\n\nJavaScript['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = JavaScript.valueToCode(block, 'INPUT', JavaScript.ORDER_MEMBER);\n  const delimiter =\n      JavaScript.valueToCode(block, 'DELIM', JavaScript.ORDER_NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  const list =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_FUNCTION_CALL) ||\n      '[]';\n  const code = list + '.slice().reverse()';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for logic blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.logic');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        JavaScript.valueToCode(block, 'IF' + n, JavaScript.ORDER_NONE) ||\n        'false';\n    let branchCode = JavaScript.statementToCode(block, 'DO' + n);\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || JavaScript.STATEMENT_SUFFIX) {\n    let branchCode = JavaScript.statementToCode(block, 'ELSE');\n    if (JavaScript.STATEMENT_SUFFIX) {\n      branchCode = JavaScript.prefixLines(\n                       JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n                       JavaScript.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nJavaScript['controls_ifelse'] = JavaScript['controls_if'];\n\nJavaScript['logic_compare'] = function(block) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      JavaScript.ORDER_EQUALITY :\n      JavaScript.ORDER_RELATIONAL;\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order = (operator === '&&') ? JavaScript.ORDER_LOGICAL_AND :\n                                      JavaScript.ORDER_LOGICAL_OR;\n  let argument0 = JavaScript.valueToCode(block, 'A', order);\n  let argument1 = JavaScript.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nJavaScript['logic_negate'] = function(block) {\n  // Negation.\n  const order = JavaScript.ORDER_LOGICAL_NOT;\n  const argument0 = JavaScript.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nJavaScript['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_null'] = function(block) {\n  // Null data type.\n  return ['null', JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['logic_ternary'] = function(block) {\n  // Ternary operator.\n  const value_if =\n      JavaScript.valueToCode(block, 'IF', JavaScript.ORDER_CONDITIONAL) ||\n      'false';\n  const value_then =\n      JavaScript.valueToCode(block, 'THEN', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const value_else =\n      JavaScript.valueToCode(block, 'ELSE', JavaScript.ORDER_CONDITIONAL) ||\n      'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, JavaScript.ORDER_CONDITIONAL];\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.loops');\n\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        JavaScript.valueToCode(block, 'TIMES', JavaScript.ORDER_ASSIGNMENT) ||\n        '0';\n  }\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      JavaScript.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        JavaScript.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_repeat'] = JavaScript['controls_repeat_ext'];\n\nJavaScript['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      JavaScript.valueToCode(\n          block, 'BOOL',\n          until ? JavaScript.ORDER_LOGICAL_NOT : JavaScript.ORDER_NONE) ||\n      'false';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nJavaScript['controls_for'] = function(block) {\n  // For loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'FROM', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const argument1 =\n      JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const increment =\n      JavaScript.valueToCode(block, 'BY', JavaScript.ORDER_ASSIGNMENT) || '1';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = JavaScript.nameDB_.getDistinctName(\n          variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_inc', NameType.VARIABLE);\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nJavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  const variable0 =\n      JavaScript.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      JavaScript.valueToCode(block, 'LIST', JavaScript.ORDER_ASSIGNMENT) ||\n      '[]';\n  let branch = JavaScript.statementToCode(block, 'DO');\n  branch = JavaScript.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = JavaScript.nameDB_.getDistinctName(\n        variable0 + '_list', NameType.VARIABLE);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = JavaScript.nameDB_.getDistinctName(\n      variable0 + '_index', NameType.VARIABLE);\n  branch = JavaScript.INDENT + variable0 + ' = ' + listVar + '[' + indexVar +\n      '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nJavaScript['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (JavaScript.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @suppress {missingRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.math');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['math_number'] = function(block) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? JavaScript.ORDER_ATOMIC :\n              JavaScript.ORDER_UNARY_NEGATION;\n  return [code, order];\n};\n\nJavaScript['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', JavaScript.ORDER_ADDITION],\n    'MINUS': [' - ', JavaScript.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', JavaScript.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', JavaScript.ORDER_DIVISION],\n    'POWER': [null, JavaScript.ORDER_NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = JavaScript.valueToCode(block, 'A', order) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nJavaScript['math_single'] = function(block) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, JavaScript.ORDER_UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_DIVISION) || '0';\n  } else {\n    arg = JavaScript.valueToCode(block, 'NUM',\n        JavaScript.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, JavaScript.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, JavaScript.ORDER_DIVISION];\n};\n\nJavaScript['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.PI', JavaScript.ORDER_MEMBER],\n    'E': ['Math.E', JavaScript.ORDER_MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', JavaScript.ORDER_DIVISION],\n    'SQRT2': ['Math.SQRT2', JavaScript.ORDER_MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', JavaScript.ORDER_MEMBER],\n    'INFINITY': ['Infinity', JavaScript.ORDER_ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nJavaScript['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 === 0', JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'ODD': [' % 2 === 1', JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'WHOLE': [' % 1 === 0', JavaScript.ORDER_MODULUS,\n        JavaScript.ORDER_EQUALITY],\n    'POSITIVE': [' > 0', JavaScript.ORDER_RELATIONAL,\n        JavaScript.ORDER_RELATIONAL],\n    'NEGATIVE': [' < 0', JavaScript.ORDER_RELATIONAL,\n        JavaScript.ORDER_RELATIONAL],\n    'DIVISIBLE_BY': [null, JavaScript.ORDER_MODULUS, JavaScript.ORDER_EQUALITY],\n    'PRIME': [null, JavaScript.ORDER_NONE, JavaScript.ORDER_FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = JavaScript.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = JavaScript.provideFunction_('mathIsPrime', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = JavaScript.valueToCode(block, 'DIVISOR',\n        JavaScript.ORDER_MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nJavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  const argument0 = JavaScript.valueToCode(block, 'DELTA',\n      JavaScript.ORDER_ADDITION) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (typeof ' + varName + ' === \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nJavaScript['math_round'] = JavaScript['math_single'];\n// Trigonometry functions have a single operand.\nJavaScript['math_trig'] = JavaScript['math_single'];\n\nJavaScript['math_on_list'] = function(block) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_('mathMean', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = JavaScript.provideFunction_('mathMedian', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = JavaScript.provideFunction_('mathModes', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName = JavaScript.provideFunction_('mathStandardDeviation', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_('mathRandomList', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n      list = JavaScript.valueToCode(block, 'LIST',\n          JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_modulo'] = function(block) {\n  // Remainder computation.\n  const argument0 = JavaScript.valueToCode(block, 'DIVIDEND',\n      JavaScript.ORDER_MODULUS) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'DIVISOR',\n      JavaScript.ORDER_MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, JavaScript.ORDER_MODULUS];\n};\n\nJavaScript['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  const argument0 = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'LOW',\n      JavaScript.ORDER_NONE) || '0';\n  const argument2 = JavaScript.valueToCode(block, 'HIGH',\n      JavaScript.ORDER_NONE) || 'Infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  const argument0 = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'TO',\n      JavaScript.ORDER_NONE) || '0';\n  const functionName = JavaScript.provideFunction_('mathRandomInt', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = JavaScript.valueToCode(block, 'X',\n      JavaScript.ORDER_NONE) || '0';\n  const argument1 = JavaScript.valueToCode(block, 'Y',\n      JavaScript.ORDER_NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      JavaScript.ORDER_DIVISION];\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.procedures');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (JavaScript.STATEMENT_PREFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_PREFIX, block);\n  }\n  if (JavaScript.STATEMENT_SUFFIX) {\n    xfix1 += JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = JavaScript.prefixLines(xfix1, JavaScript.INDENT);\n  }\n  let loopTrap = '';\n  if (JavaScript.INFINITE_LOOP_TRAP) {\n    loopTrap = JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.INFINITE_LOOP_TRAP, block),\n        JavaScript.INDENT);\n  }\n  const branch = JavaScript.statementToCode(block, 'STACK');\n  let returnValue =\n      JavaScript.valueToCode(block, 'RETURN', JavaScript.ORDER_NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = JavaScript.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + '}';\n  code = JavaScript.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  JavaScript.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nJavaScript['procedures_defnoreturn'] = JavaScript['procedures_defreturn'];\n\nJavaScript['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  const funcName = JavaScript.nameDB_.getName(\n      block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = JavaScript.valueToCode(block, 'ARG' + i, JavaScript.ORDER_NONE) ||\n        'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = JavaScript['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nJavaScript['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  const condition =\n      JavaScript.valueToCode(block, 'CONDITION', JavaScript.ORDER_NONE) ||\n      'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += JavaScript.prefixLines(\n        JavaScript.injectId(JavaScript.STATEMENT_SUFFIX, block),\n        JavaScript.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        JavaScript.valueToCode(block, 'VALUE', JavaScript.ORDER_NONE) || 'null';\n    code += JavaScript.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += JavaScript.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for text blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.texts');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, JavaScript.ORDER_ATOMIC];\n  }\n  return ['String(' + value + ')', JavaScript.ORDER_FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getSubstringIndex = function(stringName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nJavaScript['text'] = function(block) {\n  // Text value.\n  const code = JavaScript.quote_(block.getFieldValue('TEXT'));\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['text_multiline'] = function(block) {\n  // Text value.\n  const code = JavaScript.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? JavaScript.ORDER_ADDITION :\n      JavaScript.ORDER_ATOMIC;\n  return [code, order];\n};\n\nJavaScript['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", JavaScript.ORDER_ATOMIC];\n    case 1: {\n      const element = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = JavaScript.valueToCode(block, 'ADD0',\n          JavaScript.ORDER_NONE) || \"''\";\n      const element1 = JavaScript.valueToCode(block, 'ADD1',\n          JavaScript.ORDER_NONE) || \"''\";\n      const code = forceString(element0)[0] +\n          ' + ' + forceString(element1)[0];\n      return [code, JavaScript.ORDER_ADDITION];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] = JavaScript.valueToCode(block, 'ADD' + i,\n            JavaScript.ORDER_NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n};\n\nJavaScript['text_append'] = function(block) {\n  // Append to a variable in place.\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const code = varName + ' += ' +\n      forceString(value)[0] + ';\\n';\n  return code;\n};\n\nJavaScript['text_length'] = function(block) {\n  // String or array length.\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return [text + '.length', JavaScript.ORDER_MEMBER];\n};\n\nJavaScript['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return ['!' + text + '.length', JavaScript.ORDER_LOGICAL_NOT];\n};\n\nJavaScript['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  const operator = block.getFieldValue('END') === 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  const substring = JavaScript.valueToCode(block, 'FIND',\n      JavaScript.ORDER_NONE) || \"''\";\n  const text = JavaScript.valueToCode(block, 'VALUE',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', JavaScript.ORDER_ADDITION];\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? JavaScript.ORDER_NONE :\n      JavaScript.ORDER_MEMBER;\n  const text = JavaScript.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = JavaScript.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = JavaScript.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = JavaScript.provideFunction_('textRandomLetter', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, JavaScript.ORDER_FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nJavaScript['text_getSubstring'] = function(block) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where1 !== 'LAST' &&\n      where2 !== 'FROM_END' && where2 !== 'LAST');\n  const textOrder = requiresLengthCall ? JavaScript.ORDER_MEMBER :\n      JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, JavaScript.ORDER_NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = JavaScript.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = JavaScript.getAdjusted(block, 'AT1', 1, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = JavaScript.getAdjusted(block, 'AT2', 0, false,\n            JavaScript.ORDER_SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = JavaScript.getAdjusted(block, 'AT1');\n    const at2 = JavaScript.getAdjusted(block, 'AT2');\n    const wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n        (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n    const at2Param =\n        (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n    const functionName = JavaScript.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2], `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_changeCase'] = function(block) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? JavaScript.ORDER_MEMBER : JavaScript.ORDER_NONE;\n  const text = JavaScript.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into JavaScript.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName = JavaScript.provideFunction_('textToTitleCase', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_trim'] = function(block) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  return [text + operator, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_print'] = function(block) {\n  // Print statement.\n  const msg = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n};\n\nJavaScript['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = JavaScript.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = JavaScript.valueToCode(block, 'TEXT', JavaScript.ORDER_NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_prompt'] = JavaScript['text_prompt_ext'];\n\nJavaScript['text_count'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const sub = JavaScript.valueToCode(block, 'SUB',\n      JavaScript.ORDER_NONE) || \"''\";\n  const functionName = JavaScript.provideFunction_('textCount', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_replace'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_NONE) || \"''\";\n  const from = JavaScript.valueToCode(block, 'FROM',\n      JavaScript.ORDER_NONE) || \"''\";\n  const to = JavaScript.valueToCode(block, 'TO', JavaScript.ORDER_NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = JavaScript.provideFunction_('textReplace', `\nfunction ${JavaScript.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n\nJavaScript['text_reverse'] = function(block) {\n  const text = JavaScript.valueToCode(block, 'TEXT',\n      JavaScript.ORDER_MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, JavaScript.ORDER_FUNCTION_CALL];\n};\n", "/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variables');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n\n\nJavaScript['variables_get'] = function(block) {\n  // Variable getter.\n  const code = JavaScript.nameDB_.getName(block.getFieldValue('VAR'),\n      NameType.VARIABLE);\n  return [code, JavaScript.ORDER_ATOMIC];\n};\n\nJavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  const argument0 = JavaScript.valueToCode(\n                        block, 'VALUE', JavaScript.ORDER_ASSIGNMENT) || '0';\n  const varName = JavaScript.nameDB_.getName(\n      block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + ';\\n';\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for dynamic variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.variablesDynamic');\n\nconst {javascriptGenerator: JavaScript} = goog.require('Blockly.JavaScript');\n/** @suppress {extraRequire} */\ngoog.require('Blockly.JavaScript.variables');\n\n\n// JavaScript is dynamically typed.\nJavaScript['variables_get_dynamic'] = JavaScript['variables_get'];\nJavaScript['variables_set_dynamic'] = JavaScript['variables_set'];\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating JavaScript for\n *     blocks.  This is the entrypoint for javascript_compressed.js.\n * @suppress {extraRequire}\n */\n'use strict';\n\ngoog.module('Blockly.JavaScript.all');\n\nconst moduleExports = goog.require('Blockly.JavaScript');\ngoog.require('Blockly.JavaScript.colour');\ngoog.require('Blockly.JavaScript.lists');\ngoog.require('Blockly.JavaScript.logic');\ngoog.require('Blockly.JavaScript.loops');\ngoog.require('Blockly.JavaScript.math');\ngoog.require('Blockly.JavaScript.procedures');\ngoog.require('Blockly.JavaScript.texts');\ngoog.require('Blockly.JavaScript.variables');\ngoog.require('Blockly.JavaScript.variablesDynamic');\n\nexports = moduleExports;\n", "/* eslint-disable */\n;(function(root, factory) {\n  if (typeof define === 'function' && define.amd) { // AMD\n    define(['./core', './javascript_compressed.js'], factory);\n  } else if (typeof exports === 'object') { // Node.js\n    module.exports = factory(require('./core'), require('./javascript_compressed.js'));\n  } else { // Browser\n    root.BlocklyJavaScript = factory(root.Blockly, root.BlocklyJavaScript);\n  }\n}(this, function(Blockly, BlocklyJavaScript) {\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview JavaScript Generator module; just a wrapper for\n *     javascript_compressed.js.\n */\n\nreturn BlocklyJavaScript;\n}));\n"],
  "mappings": "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",
  "names": ["Variables", "stringUtils", "CodeGenerator", "inputTypes", "Names", "NameType", "JavaScript", "addReservedWords", "Object", "getOwnPropertyNames", "globalThis", "join", "ORDER_ATOMIC", "ORDER_NEW", "ORDER_MEMBER", "ORDER_FUNCTION_CALL", "ORDER_INCREMENT", "ORDER_DECREMENT", "ORDER_BITWISE_NOT", "ORDER_UNARY_PLUS", "ORDER_UNARY_NEGATION", "ORDER_LOGICAL_NOT", "ORDER_TYPEOF", "ORDER_VOID", "ORDER_DELETE", "ORDER_AWAIT", "ORDER_EXPONENTIATION", "ORDER_MULTIPLICATION", "ORDER_DIVISION", "ORDER_MODULUS", "ORDER_SUBTRACTION", "ORDER_ADDITION", "ORDER_BITWISE_SHIFT", "ORDER_RELATIONAL", "ORDER_IN", "ORDER_INSTANCEOF", "ORDER_EQUALITY", "ORDER_BITWISE_AND", "ORDER_BITWISE_XOR", "ORDER_BITWISE_OR", "ORDER_LOGICAL_AND", "ORDER_LOGICAL_OR", "ORDER_CONDITIONAL", "ORDER_ASSIGNMENT", "ORDER_YIELD", "ORDER_COMMA", "ORDER_NONE", "ORDER_OVERRIDES", "isInitialized", "init", "JavaScript.init", "workspace", "getPrototypeOf", "call", "nameDB_", "reset", "RESERVED_WORDS_", "setVariableMap", "getVariableMap", "populateVariables", "populateProcedures", "defvars", "devVarList", "allDeveloperVariables", "i", "length", "push", "getName", "DEVELOPER_VARIABLE", "allUsedVarModels", "variables", "getId", "VARIABLE", "definitions_", "finish", "JavaScript.finish", "code", "definitions", "values", "scrubNakedValue", "JavaScript.scrubNakedValue", "line", "quote_", "JavaScript.quote_", "string", "replace", "multiline_quote_", "JavaScript.multiline_quote_", "split", "map", "lines", "scrub_", "JavaScript.scrub_", "block", "opt_thisOnly", "commentCode", "outputConnection", "targetConnection", "comment", "getCommentText", "wrap", "COMMENT_WRAP", "prefixLines", "inputList", "type", "VALUE", "childBlock", "connection", "targetBlock", "allNestedComments", "nextBlock", "nextConnection", "nextCode", "blockToCode", "getAdjusted", "JavaScript.getAdjusted", "atId", "opt_delta", "opt_negate", "opt_order", "delta", "order", "options", "oneBasedIndex", "defaultAtIndex", "innerOrder", "outerOrder", "at", "valueToCode", "isNumber", "Number", "Math", "floor", "getFieldValue", "provideFunction_", "FUNCTION_NAME_PLACEHOLDER_", "functionName", "red", "green", "blue", "c1", "c2", "ratio", "elements", "Array", "itemCount_", "element", "repeatCount", "operator", "item", "mode", "where", "list", "Error", "cacheList", "match", "listVar", "getDistinctName", "value", "xVar", "getSubstringIndex", "listName", "opt_at", "where1", "where2", "at1", "at2", "wherePascalCase", "direction", "getCompareFunctionName", "input", "delimiter", "n", "STATEMENT_PREFIX", "injectId", "conditionCode", "branchCode", "statementToCode", "STATEMENT_SUFFIX", "INDENT", "getInput", "OPERATORS", "argument0", "argument1", "defaultArgument", "value_if", "value_then", "value_else", "repeats", "getField", "String", "branch", "addLoopTrap", "loopVar", "endVar", "until", "variable0", "increment", "up", "step", "abs", "startVar", "incVar", "indexVar", "xfix", "loop", "getSurroundLoop", "suppressPrefixSuffix", "tuple", "arg", "CONSTANTS", "PROPERTIES", "dropdownProperty", "suffix", "inputOrder", "outputOrder", "numberToCheck", "divisor", "varName", "func", "argument2", "funcName", "PROCEDURE", "xfix1", "loopTrap", "INFINITE_LOOP_TRAP", "returnValue", "xfix2", "args", "getVars", "hasReturnValue_", "strRegExp", "forceString", "test", "stringName", "indexOf", "codeAndOrder", "element0", "element1", "substring", "text", "requiresLengthCall", "sub", "from", "to", "exports", "moduleExports"]
}
